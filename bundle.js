/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/entry.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/lodash.debounce/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.debounce/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.debounce/index.js\n");

/***/ }),

/***/ "./node_modules/nouislider/distribute/nouislider.js":
/*!**********************************************************!*\
  !*** ./node_modules/nouislider/distribute/nouislider.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! nouislider - 12.1.0 - 10/25/2018 */\n(function(factory) {\r\n    if (true) {\r\n        // AMD. Register as an anonymous module.\r\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n    } else {}\r\n})(function() {\r\n    \"use strict\";\r\n\r\n    var VERSION = \"12.1.0\";\r\n\r\n    function isValidFormatter(entry) {\r\n        return typeof entry === \"object\" && typeof entry.to === \"function\" && typeof entry.from === \"function\";\r\n    }\r\n\r\n    function removeElement(el) {\r\n        el.parentElement.removeChild(el);\r\n    }\r\n\r\n    function isSet(value) {\r\n        return value !== null && value !== undefined;\r\n    }\r\n\r\n    // Bindable version\r\n    function preventDefault(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    // Removes duplicates from an array.\r\n    function unique(array) {\r\n        return array.filter(function(a) {\r\n            return !this[a] ? (this[a] = true) : false;\r\n        }, {});\r\n    }\r\n\r\n    // Round a value to the closest 'to'.\r\n    function closest(value, to) {\r\n        return Math.round(value / to) * to;\r\n    }\r\n\r\n    // Current position of an element relative to the document.\r\n    function offset(elem, orientation) {\r\n        var rect = elem.getBoundingClientRect();\r\n        var doc = elem.ownerDocument;\r\n        var docElem = doc.documentElement;\r\n        var pageOffset = getPageOffset(doc);\r\n\r\n        // getBoundingClientRect contains left scroll in Chrome on Android.\r\n        // I haven't found a feature detection that proves this. Worst case\r\n        // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.\r\n        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {\r\n            pageOffset.x = 0;\r\n        }\r\n\r\n        return orientation\r\n            ? rect.top + pageOffset.y - docElem.clientTop\r\n            : rect.left + pageOffset.x - docElem.clientLeft;\r\n    }\r\n\r\n    // Checks whether a value is numerical.\r\n    function isNumeric(a) {\r\n        return typeof a === \"number\" && !isNaN(a) && isFinite(a);\r\n    }\r\n\r\n    // Sets a class and removes it after [duration] ms.\r\n    function addClassFor(element, className, duration) {\r\n        if (duration > 0) {\r\n            addClass(element, className);\r\n            setTimeout(function() {\r\n                removeClass(element, className);\r\n            }, duration);\r\n        }\r\n    }\r\n\r\n    // Limits a value to 0 - 100\r\n    function limit(a) {\r\n        return Math.max(Math.min(a, 100), 0);\r\n    }\r\n\r\n    // Wraps a variable as an array, if it isn't one yet.\r\n    // Note that an input array is returned by reference!\r\n    function asArray(a) {\r\n        return Array.isArray(a) ? a : [a];\r\n    }\r\n\r\n    // Counts decimals\r\n    function countDecimals(numStr) {\r\n        numStr = String(numStr);\r\n        var pieces = numStr.split(\".\");\r\n        return pieces.length > 1 ? pieces[1].length : 0;\r\n    }\r\n\r\n    // http://youmightnotneedjquery.com/#add_class\r\n    function addClass(el, className) {\r\n        if (el.classList) {\r\n            el.classList.add(className);\r\n        } else {\r\n            el.className += \" \" + className;\r\n        }\r\n    }\r\n\r\n    // http://youmightnotneedjquery.com/#remove_class\r\n    function removeClass(el, className) {\r\n        if (el.classList) {\r\n            el.classList.remove(className);\r\n        } else {\r\n            el.className = el.className.replace(\r\n                new RegExp(\"(^|\\\\b)\" + className.split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"),\r\n                \" \"\r\n            );\r\n        }\r\n    }\r\n\r\n    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/\r\n    function hasClass(el, className) {\r\n        return el.classList\r\n            ? el.classList.contains(className)\r\n            : new RegExp(\"\\\\b\" + className + \"\\\\b\").test(el.className);\r\n    }\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes\r\n    function getPageOffset(doc) {\r\n        var supportPageOffset = window.pageXOffset !== undefined;\r\n        var isCSS1Compat = (doc.compatMode || \"\") === \"CSS1Compat\";\r\n        var x = supportPageOffset\r\n            ? window.pageXOffset\r\n            : isCSS1Compat\r\n                ? doc.documentElement.scrollLeft\r\n                : doc.body.scrollLeft;\r\n        var y = supportPageOffset\r\n            ? window.pageYOffset\r\n            : isCSS1Compat\r\n                ? doc.documentElement.scrollTop\r\n                : doc.body.scrollTop;\r\n\r\n        return {\r\n            x: x,\r\n            y: y\r\n        };\r\n    }\r\n\r\n    // we provide a function to compute constants instead\r\n    // of accessing window.* as soon as the module needs it\r\n    // so that we do not compute anything if not needed\r\n    function getActions() {\r\n        // Determine the events to bind. IE11 implements pointerEvents without\r\n        // a prefix, which breaks compatibility with the IE10 implementation.\r\n        return window.navigator.pointerEnabled\r\n            ? {\r\n                  start: \"pointerdown\",\r\n                  move: \"pointermove\",\r\n                  end: \"pointerup\"\r\n              }\r\n            : window.navigator.msPointerEnabled\r\n                ? {\r\n                      start: \"MSPointerDown\",\r\n                      move: \"MSPointerMove\",\r\n                      end: \"MSPointerUp\"\r\n                  }\r\n                : {\r\n                      start: \"mousedown touchstart\",\r\n                      move: \"mousemove touchmove\",\r\n                      end: \"mouseup touchend\"\r\n                  };\r\n    }\r\n\r\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n    // Issue #785\r\n    function getSupportsPassive() {\r\n        var supportsPassive = false;\r\n\r\n        /* eslint-disable */\r\n        try {\r\n            var opts = Object.defineProperty({}, \"passive\", {\r\n                get: function() {\r\n                    supportsPassive = true;\r\n                }\r\n            });\r\n\r\n            window.addEventListener(\"test\", null, opts);\r\n        } catch (e) {}\r\n        /* eslint-enable */\r\n\r\n        return supportsPassive;\r\n    }\r\n\r\n    function getSupportsTouchActionNone() {\r\n        return window.CSS && CSS.supports && CSS.supports(\"touch-action\", \"none\");\r\n    }\r\n\r\n    // Value calculation\r\n\r\n    // Determine the size of a sub-range in relation to a full range.\r\n    function subRangeRatio(pa, pb) {\r\n        return 100 / (pb - pa);\r\n    }\r\n\r\n    // (percentage) How many percent is this value of this range?\r\n    function fromPercentage(range, value) {\r\n        return (value * 100) / (range[1] - range[0]);\r\n    }\r\n\r\n    // (percentage) Where is this value on this range?\r\n    function toPercentage(range, value) {\r\n        return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0]);\r\n    }\r\n\r\n    // (value) How much is this percentage on this range?\r\n    function isPercentage(range, value) {\r\n        return (value * (range[1] - range[0])) / 100 + range[0];\r\n    }\r\n\r\n    // Range conversion\r\n\r\n    function getJ(value, arr) {\r\n        var j = 1;\r\n\r\n        while (value >= arr[j]) {\r\n            j += 1;\r\n        }\r\n\r\n        return j;\r\n    }\r\n\r\n    // (percentage) Input a value, find where, on a scale of 0-100, it applies.\r\n    function toStepping(xVal, xPct, value) {\r\n        if (value >= xVal.slice(-1)[0]) {\r\n            return 100;\r\n        }\r\n\r\n        var j = getJ(value, xVal);\r\n        var va = xVal[j - 1];\r\n        var vb = xVal[j];\r\n        var pa = xPct[j - 1];\r\n        var pb = xPct[j];\r\n\r\n        return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);\r\n    }\r\n\r\n    // (value) Input a percentage, find where it is on the specified range.\r\n    function fromStepping(xVal, xPct, value) {\r\n        // There is no range group that fits 100\r\n        if (value >= 100) {\r\n            return xVal.slice(-1)[0];\r\n        }\r\n\r\n        var j = getJ(value, xPct);\r\n        var va = xVal[j - 1];\r\n        var vb = xVal[j];\r\n        var pa = xPct[j - 1];\r\n        var pb = xPct[j];\r\n\r\n        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));\r\n    }\r\n\r\n    // (percentage) Get the step that applies at a certain value.\r\n    function getStep(xPct, xSteps, snap, value) {\r\n        if (value === 100) {\r\n            return value;\r\n        }\r\n\r\n        var j = getJ(value, xPct);\r\n        var a = xPct[j - 1];\r\n        var b = xPct[j];\r\n\r\n        // If 'snap' is set, steps are used as fixed points on the slider.\r\n        if (snap) {\r\n            // Find the closest position, a or b.\r\n            if (value - a > (b - a) / 2) {\r\n                return b;\r\n            }\r\n\r\n            return a;\r\n        }\r\n\r\n        if (!xSteps[j - 1]) {\r\n            return value;\r\n        }\r\n\r\n        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);\r\n    }\r\n\r\n    // Entry parsing\r\n\r\n    function handleEntryPoint(index, value, that) {\r\n        var percentage;\r\n\r\n        // Wrap numerical input in an array.\r\n        if (typeof value === \"number\") {\r\n            value = [value];\r\n        }\r\n\r\n        // Reject any invalid input, by testing whether value is an array.\r\n        if (!Array.isArray(value)) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' contains invalid value.\");\r\n        }\r\n\r\n        // Covert min/max syntax to 0 and 100.\r\n        if (index === \"min\") {\r\n            percentage = 0;\r\n        } else if (index === \"max\") {\r\n            percentage = 100;\r\n        } else {\r\n            percentage = parseFloat(index);\r\n        }\r\n\r\n        // Check for correct input.\r\n        if (!isNumeric(percentage) || !isNumeric(value[0])) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' value isn't numeric.\");\r\n        }\r\n\r\n        // Store values.\r\n        that.xPct.push(percentage);\r\n        that.xVal.push(value[0]);\r\n\r\n        // NaN will evaluate to false too, but to keep\r\n        // logging clear, set step explicitly. Make sure\r\n        // not to override the 'step' setting with false.\r\n        if (!percentage) {\r\n            if (!isNaN(value[1])) {\r\n                that.xSteps[0] = value[1];\r\n            }\r\n        } else {\r\n            that.xSteps.push(isNaN(value[1]) ? false : value[1]);\r\n        }\r\n\r\n        that.xHighestCompleteStep.push(0);\r\n    }\r\n\r\n    function handleStepPoint(i, n, that) {\r\n        // Ignore 'false' stepping.\r\n        if (!n) {\r\n            return true;\r\n        }\r\n\r\n        // Factor to range ratio\r\n        that.xSteps[i] =\r\n            fromPercentage([that.xVal[i], that.xVal[i + 1]], n) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);\r\n\r\n        var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];\r\n        var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);\r\n        var step = that.xVal[i] + that.xNumSteps[i] * highestStep;\r\n\r\n        that.xHighestCompleteStep[i] = step;\r\n    }\r\n\r\n    // Interface\r\n\r\n    function Spectrum(entry, snap, singleStep) {\r\n        this.xPct = [];\r\n        this.xVal = [];\r\n        this.xSteps = [singleStep || false];\r\n        this.xNumSteps = [false];\r\n        this.xHighestCompleteStep = [];\r\n\r\n        this.snap = snap;\r\n\r\n        var index;\r\n        var ordered = []; // [0, 'min'], [1, '50%'], [2, 'max']\r\n\r\n        // Map the object keys to an array.\r\n        for (index in entry) {\r\n            if (entry.hasOwnProperty(index)) {\r\n                ordered.push([entry[index], index]);\r\n            }\r\n        }\r\n\r\n        // Sort all entries by value (numeric sort).\r\n        if (ordered.length && typeof ordered[0][0] === \"object\") {\r\n            ordered.sort(function(a, b) {\r\n                return a[0][0] - b[0][0];\r\n            });\r\n        } else {\r\n            ordered.sort(function(a, b) {\r\n                return a[0] - b[0];\r\n            });\r\n        }\r\n\r\n        // Convert all entries to subranges.\r\n        for (index = 0; index < ordered.length; index++) {\r\n            handleEntryPoint(ordered[index][1], ordered[index][0], this);\r\n        }\r\n\r\n        // Store the actual step values.\r\n        // xSteps is sorted in the same order as xPct and xVal.\r\n        this.xNumSteps = this.xSteps.slice(0);\r\n\r\n        // Convert all numeric steps to the percentage of the subrange they represent.\r\n        for (index = 0; index < this.xNumSteps.length; index++) {\r\n            handleStepPoint(index, this.xNumSteps[index], this);\r\n        }\r\n    }\r\n\r\n    Spectrum.prototype.getMargin = function(value) {\r\n        var step = this.xNumSteps[0];\r\n\r\n        if (step && (value / step) % 1 !== 0) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'limit', 'margin' and 'padding' must be divisible by step.\");\r\n        }\r\n\r\n        return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;\r\n    };\r\n\r\n    Spectrum.prototype.toStepping = function(value) {\r\n        value = toStepping(this.xVal, this.xPct, value);\r\n\r\n        return value;\r\n    };\r\n\r\n    Spectrum.prototype.fromStepping = function(value) {\r\n        return fromStepping(this.xVal, this.xPct, value);\r\n    };\r\n\r\n    Spectrum.prototype.getStep = function(value) {\r\n        value = getStep(this.xPct, this.xSteps, this.snap, value);\r\n\r\n        return value;\r\n    };\r\n\r\n    Spectrum.prototype.getNearbySteps = function(value) {\r\n        var j = getJ(value, this.xPct);\r\n\r\n        return {\r\n            stepBefore: {\r\n                startValue: this.xVal[j - 2],\r\n                step: this.xNumSteps[j - 2],\r\n                highestStep: this.xHighestCompleteStep[j - 2]\r\n            },\r\n            thisStep: {\r\n                startValue: this.xVal[j - 1],\r\n                step: this.xNumSteps[j - 1],\r\n                highestStep: this.xHighestCompleteStep[j - 1]\r\n            },\r\n            stepAfter: {\r\n                startValue: this.xVal[j],\r\n                step: this.xNumSteps[j],\r\n                highestStep: this.xHighestCompleteStep[j]\r\n            }\r\n        };\r\n    };\r\n\r\n    Spectrum.prototype.countStepDecimals = function() {\r\n        var stepDecimals = this.xNumSteps.map(countDecimals);\r\n        return Math.max.apply(null, stepDecimals);\r\n    };\r\n\r\n    // Outside testing\r\n    Spectrum.prototype.convert = function(value) {\r\n        return this.getStep(this.toStepping(value));\r\n    };\r\n\r\n    /*\tEvery input option is tested and parsed. This'll prevent\r\n        endless validation in internal methods. These tests are\r\n        structured with an item for every option available. An\r\n        option can be marked as required by setting the 'r' flag.\r\n        The testing function is provided with three arguments:\r\n            - The provided value for the option;\r\n            - A reference to the options object;\r\n            - The name for the option;\r\n\r\n        The testing function returns false when an error is detected,\r\n        or true when everything is OK. It can also modify the option\r\n        object, to make sure all values can be correctly looped elsewhere. */\r\n\r\n    var defaultFormatter = {\r\n        to: function(value) {\r\n            return value !== undefined && value.toFixed(2);\r\n        },\r\n        from: Number\r\n    };\r\n\r\n    function validateFormat(entry) {\r\n        // Any object with a to and from method is supported.\r\n        if (isValidFormatter(entry)) {\r\n            return true;\r\n        }\r\n\r\n        throw new Error(\"noUiSlider (\" + VERSION + \"): 'format' requires 'to' and 'from' methods.\");\r\n    }\r\n\r\n    function testStep(parsed, entry) {\r\n        if (!isNumeric(entry)) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'step' is not numeric.\");\r\n        }\r\n\r\n        // The step option can still be used to set stepping\r\n        // for linear sliders. Overwritten if set in 'range'.\r\n        parsed.singleStep = entry;\r\n    }\r\n\r\n    function testRange(parsed, entry) {\r\n        // Filter incorrect input.\r\n        if (typeof entry !== \"object\" || Array.isArray(entry)) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' is not an object.\");\r\n        }\r\n\r\n        // Catch missing start or end.\r\n        if (entry.min === undefined || entry.max === undefined) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): Missing 'min' or 'max' in 'range'.\");\r\n        }\r\n\r\n        // Catch equal start or end.\r\n        if (entry.min === entry.max) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'range' 'min' and 'max' cannot be equal.\");\r\n        }\r\n\r\n        parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);\r\n    }\r\n\r\n    function testStart(parsed, entry) {\r\n        entry = asArray(entry);\r\n\r\n        // Validate input. Values aren't tested, as the public .val method\r\n        // will always provide a valid location.\r\n        if (!Array.isArray(entry) || !entry.length) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'start' option is incorrect.\");\r\n        }\r\n\r\n        // Store the number of handles.\r\n        parsed.handles = entry.length;\r\n\r\n        // When the slider is initialized, the .val method will\r\n        // be called with the start options.\r\n        parsed.start = entry;\r\n    }\r\n\r\n    function testSnap(parsed, entry) {\r\n        // Enforce 100% stepping within subranges.\r\n        parsed.snap = entry;\r\n\r\n        if (typeof entry !== \"boolean\") {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'snap' option must be a boolean.\");\r\n        }\r\n    }\r\n\r\n    function testAnimate(parsed, entry) {\r\n        // Enforce 100% stepping within subranges.\r\n        parsed.animate = entry;\r\n\r\n        if (typeof entry !== \"boolean\") {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'animate' option must be a boolean.\");\r\n        }\r\n    }\r\n\r\n    function testAnimationDuration(parsed, entry) {\r\n        parsed.animationDuration = entry;\r\n\r\n        if (typeof entry !== \"number\") {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'animationDuration' option must be a number.\");\r\n        }\r\n    }\r\n\r\n    function testConnect(parsed, entry) {\r\n        var connect = [false];\r\n        var i;\r\n\r\n        // Map legacy options\r\n        if (entry === \"lower\") {\r\n            entry = [true, false];\r\n        } else if (entry === \"upper\") {\r\n            entry = [false, true];\r\n        }\r\n\r\n        // Handle boolean options\r\n        if (entry === true || entry === false) {\r\n            for (i = 1; i < parsed.handles; i++) {\r\n                connect.push(entry);\r\n            }\r\n\r\n            connect.push(false);\r\n        }\r\n\r\n        // Reject invalid input\r\n        else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'connect' option doesn't match handle count.\");\r\n        } else {\r\n            connect = entry;\r\n        }\r\n\r\n        parsed.connect = connect;\r\n    }\r\n\r\n    function testOrientation(parsed, entry) {\r\n        // Set orientation to an a numerical value for easy\r\n        // array selection.\r\n        switch (entry) {\r\n            case \"horizontal\":\r\n                parsed.ort = 0;\r\n                break;\r\n            case \"vertical\":\r\n                parsed.ort = 1;\r\n                break;\r\n            default:\r\n                throw new Error(\"noUiSlider (\" + VERSION + \"): 'orientation' option is invalid.\");\r\n        }\r\n    }\r\n\r\n    function testMargin(parsed, entry) {\r\n        if (!isNumeric(entry)) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'margin' option must be numeric.\");\r\n        }\r\n\r\n        // Issue #582\r\n        if (entry === 0) {\r\n            return;\r\n        }\r\n\r\n        parsed.margin = parsed.spectrum.getMargin(entry);\r\n\r\n        if (!parsed.margin) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'margin' option is only supported on linear sliders.\");\r\n        }\r\n    }\r\n\r\n    function testLimit(parsed, entry) {\r\n        if (!isNumeric(entry)) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'limit' option must be numeric.\");\r\n        }\r\n\r\n        parsed.limit = parsed.spectrum.getMargin(entry);\r\n\r\n        if (!parsed.limit || parsed.handles < 2) {\r\n            throw new Error(\r\n                \"noUiSlider (\" +\r\n                    VERSION +\r\n                    \"): 'limit' option is only supported on linear sliders with 2 or more handles.\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function testPadding(parsed, entry) {\r\n        if (!isNumeric(entry) && !Array.isArray(entry)) {\r\n            throw new Error(\r\n                \"noUiSlider (\" + VERSION + \"): 'padding' option must be numeric or array of exactly 2 numbers.\"\r\n            );\r\n        }\r\n\r\n        if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {\r\n            throw new Error(\r\n                \"noUiSlider (\" + VERSION + \"): 'padding' option must be numeric or array of exactly 2 numbers.\"\r\n            );\r\n        }\r\n\r\n        if (entry === 0) {\r\n            return;\r\n        }\r\n\r\n        if (!Array.isArray(entry)) {\r\n            entry = [entry, entry];\r\n        }\r\n\r\n        // 'getMargin' returns false for invalid values.\r\n        parsed.padding = [parsed.spectrum.getMargin(entry[0]), parsed.spectrum.getMargin(entry[1])];\r\n\r\n        if (parsed.padding[0] === false || parsed.padding[1] === false) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option is only supported on linear sliders.\");\r\n        }\r\n\r\n        if (parsed.padding[0] < 0 || parsed.padding[1] < 0) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must be a positive number(s).\");\r\n        }\r\n\r\n        if (parsed.padding[0] + parsed.padding[1] >= 100) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must not exceed 100% of the range.\");\r\n        }\r\n    }\r\n\r\n    function testDirection(parsed, entry) {\r\n        // Set direction as a numerical value for easy parsing.\r\n        // Invert connection for RTL sliders, so that the proper\r\n        // handles get the connect/background classes.\r\n        switch (entry) {\r\n            case \"ltr\":\r\n                parsed.dir = 0;\r\n                break;\r\n            case \"rtl\":\r\n                parsed.dir = 1;\r\n                break;\r\n            default:\r\n                throw new Error(\"noUiSlider (\" + VERSION + \"): 'direction' option was not recognized.\");\r\n        }\r\n    }\r\n\r\n    function testBehaviour(parsed, entry) {\r\n        // Make sure the input is a string.\r\n        if (typeof entry !== \"string\") {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'behaviour' must be a string containing options.\");\r\n        }\r\n\r\n        // Check if the string contains any keywords.\r\n        // None are required.\r\n        var tap = entry.indexOf(\"tap\") >= 0;\r\n        var drag = entry.indexOf(\"drag\") >= 0;\r\n        var fixed = entry.indexOf(\"fixed\") >= 0;\r\n        var snap = entry.indexOf(\"snap\") >= 0;\r\n        var hover = entry.indexOf(\"hover\") >= 0;\r\n        var unconstrained = entry.indexOf(\"unconstrained\") >= 0;\r\n\r\n        if (fixed) {\r\n            if (parsed.handles !== 2) {\r\n                throw new Error(\"noUiSlider (\" + VERSION + \"): 'fixed' behaviour must be used with 2 handles\");\r\n            }\r\n\r\n            // Use margin to enforce fixed state\r\n            testMargin(parsed, parsed.start[1] - parsed.start[0]);\r\n        }\r\n\r\n        if (unconstrained && (parsed.margin || parsed.limit)) {\r\n            throw new Error(\r\n                \"noUiSlider (\" + VERSION + \"): 'unconstrained' behaviour cannot be used with margin or limit\"\r\n            );\r\n        }\r\n\r\n        parsed.events = {\r\n            tap: tap || snap,\r\n            drag: drag,\r\n            fixed: fixed,\r\n            snap: snap,\r\n            hover: hover,\r\n            unconstrained: unconstrained\r\n        };\r\n    }\r\n\r\n    function testTooltips(parsed, entry) {\r\n        if (entry === false) {\r\n            return;\r\n        }\r\n\r\n        if (entry === true) {\r\n            parsed.tooltips = [];\r\n\r\n            for (var i = 0; i < parsed.handles; i++) {\r\n                parsed.tooltips.push(true);\r\n            }\r\n        } else {\r\n            parsed.tooltips = asArray(entry);\r\n\r\n            if (parsed.tooltips.length !== parsed.handles) {\r\n                throw new Error(\"noUiSlider (\" + VERSION + \"): must pass a formatter for all handles.\");\r\n            }\r\n\r\n            parsed.tooltips.forEach(function(formatter) {\r\n                if (\r\n                    typeof formatter !== \"boolean\" &&\r\n                    (typeof formatter !== \"object\" || typeof formatter.to !== \"function\")\r\n                ) {\r\n                    throw new Error(\"noUiSlider (\" + VERSION + \"): 'tooltips' must be passed a formatter or 'false'.\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function testAriaFormat(parsed, entry) {\r\n        parsed.ariaFormat = entry;\r\n        validateFormat(entry);\r\n    }\r\n\r\n    function testFormat(parsed, entry) {\r\n        parsed.format = entry;\r\n        validateFormat(entry);\r\n    }\r\n\r\n    function testKeyboardSupport(parsed, entry) {\r\n        parsed.keyboardSupport = entry;\r\n\r\n        if (typeof entry !== \"boolean\") {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'keyboardSupport' option must be a boolean.\");\r\n        }\r\n    }\r\n\r\n    function testDocumentElement(parsed, entry) {\r\n        // This is an advanced option. Passed values are used without validation.\r\n        parsed.documentElement = entry;\r\n    }\r\n\r\n    function testCssPrefix(parsed, entry) {\r\n        if (typeof entry !== \"string\" && entry !== false) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'cssPrefix' must be a string or `false`.\");\r\n        }\r\n\r\n        parsed.cssPrefix = entry;\r\n    }\r\n\r\n    function testCssClasses(parsed, entry) {\r\n        if (typeof entry !== \"object\") {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): 'cssClasses' must be an object.\");\r\n        }\r\n\r\n        if (typeof parsed.cssPrefix === \"string\") {\r\n            parsed.cssClasses = {};\r\n\r\n            for (var key in entry) {\r\n                if (!entry.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n\r\n                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];\r\n            }\r\n        } else {\r\n            parsed.cssClasses = entry;\r\n        }\r\n    }\r\n\r\n    // Test all developer settings and parse to assumption-safe values.\r\n    function testOptions(options) {\r\n        // To prove a fix for #537, freeze options here.\r\n        // If the object is modified, an error will be thrown.\r\n        // Object.freeze(options);\r\n\r\n        var parsed = {\r\n            margin: 0,\r\n            limit: 0,\r\n            padding: 0,\r\n            animate: true,\r\n            animationDuration: 300,\r\n            ariaFormat: defaultFormatter,\r\n            format: defaultFormatter\r\n        };\r\n\r\n        // Tests are executed in the order they are presented here.\r\n        var tests = {\r\n            step: { r: false, t: testStep },\r\n            start: { r: true, t: testStart },\r\n            connect: { r: true, t: testConnect },\r\n            direction: { r: true, t: testDirection },\r\n            snap: { r: false, t: testSnap },\r\n            animate: { r: false, t: testAnimate },\r\n            animationDuration: { r: false, t: testAnimationDuration },\r\n            range: { r: true, t: testRange },\r\n            orientation: { r: false, t: testOrientation },\r\n            margin: { r: false, t: testMargin },\r\n            limit: { r: false, t: testLimit },\r\n            padding: { r: false, t: testPadding },\r\n            behaviour: { r: true, t: testBehaviour },\r\n            ariaFormat: { r: false, t: testAriaFormat },\r\n            format: { r: false, t: testFormat },\r\n            tooltips: { r: false, t: testTooltips },\r\n            keyboardSupport: { r: true, t: testKeyboardSupport },\r\n            documentElement: { r: false, t: testDocumentElement },\r\n            cssPrefix: { r: true, t: testCssPrefix },\r\n            cssClasses: { r: true, t: testCssClasses }\r\n        };\r\n\r\n        var defaults = {\r\n            connect: false,\r\n            direction: \"ltr\",\r\n            behaviour: \"tap\",\r\n            orientation: \"horizontal\",\r\n            keyboardSupport: true,\r\n            cssPrefix: \"noUi-\",\r\n            cssClasses: {\r\n                target: \"target\",\r\n                base: \"base\",\r\n                origin: \"origin\",\r\n                handle: \"handle\",\r\n                handleLower: \"handle-lower\",\r\n                handleUpper: \"handle-upper\",\r\n                horizontal: \"horizontal\",\r\n                vertical: \"vertical\",\r\n                background: \"background\",\r\n                connect: \"connect\",\r\n                connects: \"connects\",\r\n                ltr: \"ltr\",\r\n                rtl: \"rtl\",\r\n                draggable: \"draggable\",\r\n                drag: \"state-drag\",\r\n                tap: \"state-tap\",\r\n                active: \"active\",\r\n                tooltip: \"tooltip\",\r\n                pips: \"pips\",\r\n                pipsHorizontal: \"pips-horizontal\",\r\n                pipsVertical: \"pips-vertical\",\r\n                marker: \"marker\",\r\n                markerHorizontal: \"marker-horizontal\",\r\n                markerVertical: \"marker-vertical\",\r\n                markerNormal: \"marker-normal\",\r\n                markerLarge: \"marker-large\",\r\n                markerSub: \"marker-sub\",\r\n                value: \"value\",\r\n                valueHorizontal: \"value-horizontal\",\r\n                valueVertical: \"value-vertical\",\r\n                valueNormal: \"value-normal\",\r\n                valueLarge: \"value-large\",\r\n                valueSub: \"value-sub\"\r\n            }\r\n        };\r\n\r\n        // AriaFormat defaults to regular format, if any.\r\n        if (options.format && !options.ariaFormat) {\r\n            options.ariaFormat = options.format;\r\n        }\r\n\r\n        // Run all options through a testing mechanism to ensure correct\r\n        // input. It should be noted that options might get modified to\r\n        // be handled properly. E.g. wrapping integers in arrays.\r\n        Object.keys(tests).forEach(function(name) {\r\n            // If the option isn't set, but it is required, throw an error.\r\n            if (!isSet(options[name]) && defaults[name] === undefined) {\r\n                if (tests[name].r) {\r\n                    throw new Error(\"noUiSlider (\" + VERSION + \"): '\" + name + \"' is required.\");\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);\r\n        });\r\n\r\n        // Forward pips options\r\n        parsed.pips = options.pips;\r\n\r\n        // All recent browsers accept unprefixed transform.\r\n        // We need -ms- for IE9 and -webkit- for older Android;\r\n        // Assume use of -webkit- if unprefixed and -ms- are not supported.\r\n        // https://caniuse.com/#feat=transforms2d\r\n        var d = document.createElement(\"div\");\r\n        var msPrefix = d.style.msTransform !== undefined;\r\n        var noPrefix = d.style.transform !== undefined;\r\n\r\n        parsed.transformRule = noPrefix ? \"transform\" : msPrefix ? \"msTransform\" : \"webkitTransform\";\r\n\r\n        // Pips don't move, so we can place them using left/top.\r\n        var styles = [[\"left\", \"top\"], [\"right\", \"bottom\"]];\r\n\r\n        parsed.style = styles[parsed.dir][parsed.ort];\r\n\r\n        return parsed;\r\n    }\r\n\r\n    function scope(target, options, originalOptions) {\r\n        var actions = getActions();\r\n        var supportsTouchActionNone = getSupportsTouchActionNone();\r\n        var supportsPassive = supportsTouchActionNone && getSupportsPassive();\r\n\r\n        // All variables local to 'scope' are prefixed with 'scope_'\r\n        var scope_Target = target;\r\n        var scope_Locations = [];\r\n        var scope_Base;\r\n        var scope_Handles;\r\n        var scope_HandleNumbers = [];\r\n        var scope_ActiveHandlesCount = 0;\r\n        var scope_Connects;\r\n        var scope_Spectrum = options.spectrum;\r\n        var scope_Values = [];\r\n        var scope_Events = {};\r\n        var scope_Self;\r\n        var scope_Pips;\r\n        var scope_Document = target.ownerDocument;\r\n        var scope_DocumentElement = options.documentElement || scope_Document.documentElement;\r\n        var scope_Body = scope_Document.body;\r\n\r\n        // Pips constants\r\n        var PIPS_NONE = -1;\r\n        var PIPS_NO_VALUE = 0;\r\n        var PIPS_LARGE_VALUE = 1;\r\n        var PIPS_SMALL_VALUE = 2;\r\n\r\n        // For horizontal sliders in standard ltr documents,\r\n        // make .noUi-origin overflow to the left so the document doesn't scroll.\r\n        var scope_DirOffset = scope_Document.dir === \"rtl\" || options.ort === 1 ? 0 : 100;\r\n\r\n        // Creates a node, adds it to target, returns the new node.\r\n        function addNodeTo(addTarget, className) {\r\n            var div = scope_Document.createElement(\"div\");\r\n\r\n            if (className) {\r\n                addClass(div, className);\r\n            }\r\n\r\n            addTarget.appendChild(div);\r\n\r\n            return div;\r\n        }\r\n\r\n        // Append a origin to the base\r\n        function addOrigin(base, handleNumber) {\r\n            var origin = addNodeTo(base, options.cssClasses.origin);\r\n            var handle = addNodeTo(origin, options.cssClasses.handle);\r\n\r\n            handle.setAttribute(\"data-handle\", handleNumber);\r\n\r\n            if (options.keyboardSupport) {\r\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\r\n                // 0 = focusable and reachable\r\n                handle.setAttribute(\"tabindex\", \"0\");\r\n            }\r\n\r\n            handle.setAttribute(\"role\", \"slider\");\r\n            handle.setAttribute(\"aria-orientation\", options.ort ? \"vertical\" : \"horizontal\");\r\n\r\n            if (handleNumber === 0) {\r\n                addClass(handle, options.cssClasses.handleLower);\r\n            } else if (handleNumber === options.handles - 1) {\r\n                addClass(handle, options.cssClasses.handleUpper);\r\n            }\r\n\r\n            return origin;\r\n        }\r\n\r\n        // Insert nodes for connect elements\r\n        function addConnect(base, add) {\r\n            if (!add) {\r\n                return false;\r\n            }\r\n\r\n            return addNodeTo(base, options.cssClasses.connect);\r\n        }\r\n\r\n        // Add handles to the slider base.\r\n        function addElements(connectOptions, base) {\r\n            var connectBase = addNodeTo(base, options.cssClasses.connects);\r\n\r\n            scope_Handles = [];\r\n            scope_Connects = [];\r\n\r\n            scope_Connects.push(addConnect(connectBase, connectOptions[0]));\r\n\r\n            // [::::O====O====O====]\r\n            // connectOptions = [0, 1, 1, 1]\r\n\r\n            for (var i = 0; i < options.handles; i++) {\r\n                // Keep a list of all added handles.\r\n                scope_Handles.push(addOrigin(base, i));\r\n                scope_HandleNumbers[i] = i;\r\n                scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));\r\n            }\r\n        }\r\n\r\n        // Initialize a single slider.\r\n        function addSlider(addTarget) {\r\n            // Apply classes and data to the target.\r\n            addClass(addTarget, options.cssClasses.target);\r\n\r\n            if (options.dir === 0) {\r\n                addClass(addTarget, options.cssClasses.ltr);\r\n            } else {\r\n                addClass(addTarget, options.cssClasses.rtl);\r\n            }\r\n\r\n            if (options.ort === 0) {\r\n                addClass(addTarget, options.cssClasses.horizontal);\r\n            } else {\r\n                addClass(addTarget, options.cssClasses.vertical);\r\n            }\r\n\r\n            return addNodeTo(addTarget, options.cssClasses.base);\r\n        }\r\n\r\n        function addTooltip(handle, handleNumber) {\r\n            if (!options.tooltips[handleNumber]) {\r\n                return false;\r\n            }\r\n\r\n            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);\r\n        }\r\n\r\n        // The tooltips option is a shorthand for using the 'update' event.\r\n        function tooltips() {\r\n            // Tooltips are added with options.tooltips in original order.\r\n            var tips = scope_Handles.map(addTooltip);\r\n\r\n            bindEvent(\"update\", function(values, handleNumber, unencoded) {\r\n                if (!tips[handleNumber]) {\r\n                    return;\r\n                }\r\n\r\n                var formattedValue = values[handleNumber];\r\n\r\n                if (options.tooltips[handleNumber] !== true) {\r\n                    formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);\r\n                }\r\n\r\n                tips[handleNumber].innerHTML = formattedValue;\r\n            });\r\n        }\r\n\r\n        function aria() {\r\n            bindEvent(\"update\", function(values, handleNumber, unencoded, tap, positions) {\r\n                // Update Aria Values for all handles, as a change in one changes min and max values for the next.\r\n                scope_HandleNumbers.forEach(function(index) {\r\n                    var handle = scope_Handles[index];\r\n\r\n                    var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);\r\n                    var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);\r\n\r\n                    var now = positions[index];\r\n\r\n                    // Formatted value for display\r\n                    var text = options.ariaFormat.to(unencoded[index]);\r\n\r\n                    // Map to slider range values\r\n                    min = scope_Spectrum.fromStepping(min).toFixed(1);\r\n                    max = scope_Spectrum.fromStepping(max).toFixed(1);\r\n                    now = scope_Spectrum.fromStepping(now).toFixed(1);\r\n\r\n                    handle.children[0].setAttribute(\"aria-valuemin\", min);\r\n                    handle.children[0].setAttribute(\"aria-valuemax\", max);\r\n                    handle.children[0].setAttribute(\"aria-valuenow\", now);\r\n                    handle.children[0].setAttribute(\"aria-valuetext\", text);\r\n                });\r\n            });\r\n        }\r\n\r\n        function getGroup(mode, values, stepped) {\r\n            // Use the range.\r\n            if (mode === \"range\" || mode === \"steps\") {\r\n                return scope_Spectrum.xVal;\r\n            }\r\n\r\n            if (mode === \"count\") {\r\n                if (values < 2) {\r\n                    throw new Error(\"noUiSlider (\" + VERSION + \"): 'values' (>= 2) required for mode 'count'.\");\r\n                }\r\n\r\n                // Divide 0 - 100 in 'count' parts.\r\n                var interval = values - 1;\r\n                var spread = 100 / interval;\r\n\r\n                values = [];\r\n\r\n                // List these parts and have them handled as 'positions'.\r\n                while (interval--) {\r\n                    values[interval] = interval * spread;\r\n                }\r\n\r\n                values.push(100);\r\n\r\n                mode = \"positions\";\r\n            }\r\n\r\n            if (mode === \"positions\") {\r\n                // Map all percentages to on-range values.\r\n                return values.map(function(value) {\r\n                    return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);\r\n                });\r\n            }\r\n\r\n            if (mode === \"values\") {\r\n                // If the value must be stepped, it needs to be converted to a percentage first.\r\n                if (stepped) {\r\n                    return values.map(function(value) {\r\n                        // Convert to percentage, apply step, return to value.\r\n                        return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));\r\n                    });\r\n                }\r\n\r\n                // Otherwise, we can simply use the values.\r\n                return values;\r\n            }\r\n        }\r\n\r\n        function generateSpread(density, mode, group) {\r\n            function safeIncrement(value, increment) {\r\n                // Avoid floating point variance by dropping the smallest decimal places.\r\n                return (value + increment).toFixed(7) / 1;\r\n            }\r\n\r\n            var indexes = {};\r\n            var firstInRange = scope_Spectrum.xVal[0];\r\n            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];\r\n            var ignoreFirst = false;\r\n            var ignoreLast = false;\r\n            var prevPct = 0;\r\n\r\n            // Create a copy of the group, sort it and filter away all duplicates.\r\n            group = unique(\r\n                group.slice().sort(function(a, b) {\r\n                    return a - b;\r\n                })\r\n            );\r\n\r\n            // Make sure the range starts with the first element.\r\n            if (group[0] !== firstInRange) {\r\n                group.unshift(firstInRange);\r\n                ignoreFirst = true;\r\n            }\r\n\r\n            // Likewise for the last one.\r\n            if (group[group.length - 1] !== lastInRange) {\r\n                group.push(lastInRange);\r\n                ignoreLast = true;\r\n            }\r\n\r\n            group.forEach(function(current, index) {\r\n                // Get the current step and the lower + upper positions.\r\n                var step;\r\n                var i;\r\n                var q;\r\n                var low = current;\r\n                var high = group[index + 1];\r\n                var newPct;\r\n                var pctDifference;\r\n                var pctPos;\r\n                var type;\r\n                var steps;\r\n                var realSteps;\r\n                var stepSize;\r\n                var isSteps = mode === \"steps\";\r\n\r\n                // When using 'steps' mode, use the provided steps.\r\n                // Otherwise, we'll step on to the next subrange.\r\n                if (isSteps) {\r\n                    step = scope_Spectrum.xNumSteps[index];\r\n                }\r\n\r\n                // Default to a 'full' step.\r\n                if (!step) {\r\n                    step = high - low;\r\n                }\r\n\r\n                // Low can be 0, so test for false. If high is undefined,\r\n                // we are at the last subrange. Index 0 is already handled.\r\n                if (low === false || high === undefined) {\r\n                    return;\r\n                }\r\n\r\n                // Make sure step isn't 0, which would cause an infinite loop (#654)\r\n                step = Math.max(step, 0.0000001);\r\n\r\n                // Find all steps in the subrange.\r\n                for (i = low; i <= high; i = safeIncrement(i, step)) {\r\n                    // Get the percentage value for the current step,\r\n                    // calculate the size for the subrange.\r\n                    newPct = scope_Spectrum.toStepping(i);\r\n                    pctDifference = newPct - prevPct;\r\n\r\n                    steps = pctDifference / density;\r\n                    realSteps = Math.round(steps);\r\n\r\n                    // This ratio represents the amount of percentage-space a point indicates.\r\n                    // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.\r\n                    // Round the percentage offset to an even number, then divide by two\r\n                    // to spread the offset on both sides of the range.\r\n                    stepSize = pctDifference / realSteps;\r\n\r\n                    // Divide all points evenly, adding the correct number to this subrange.\r\n                    // Run up to <= so that 100% gets a point, event if ignoreLast is set.\r\n                    for (q = 1; q <= realSteps; q += 1) {\r\n                        // The ratio between the rounded value and the actual size might be ~1% off.\r\n                        // Correct the percentage offset by the number of points\r\n                        // per subrange. density = 1 will result in 100 points on the\r\n                        // full range, 2 for 50, 4 for 25, etc.\r\n                        pctPos = prevPct + q * stepSize;\r\n                        indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];\r\n                    }\r\n\r\n                    // Determine the point type.\r\n                    type = group.indexOf(i) > -1 ? PIPS_LARGE_VALUE : isSteps ? PIPS_SMALL_VALUE : PIPS_NO_VALUE;\r\n\r\n                    // Enforce the 'ignoreFirst' option by overwriting the type for 0.\r\n                    if (!index && ignoreFirst) {\r\n                        type = 0;\r\n                    }\r\n\r\n                    if (!(i === high && ignoreLast)) {\r\n                        // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.\r\n                        indexes[newPct.toFixed(5)] = [i, type];\r\n                    }\r\n\r\n                    // Update the percentage count.\r\n                    prevPct = newPct;\r\n                }\r\n            });\r\n\r\n            return indexes;\r\n        }\r\n\r\n        function addMarking(spread, filterFunc, formatter) {\r\n            var element = scope_Document.createElement(\"div\");\r\n\r\n            var valueSizeClasses = [];\r\n            valueSizeClasses[PIPS_NO_VALUE] = options.cssClasses.valueNormal;\r\n            valueSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.valueLarge;\r\n            valueSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.valueSub;\r\n\r\n            var markerSizeClasses = [];\r\n            markerSizeClasses[PIPS_NO_VALUE] = options.cssClasses.markerNormal;\r\n            markerSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.markerLarge;\r\n            markerSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.markerSub;\r\n\r\n            var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];\r\n            var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];\r\n\r\n            addClass(element, options.cssClasses.pips);\r\n            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);\r\n\r\n            function getClasses(type, source) {\r\n                var a = source === options.cssClasses.value;\r\n                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;\r\n                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;\r\n\r\n                return source + \" \" + orientationClasses[options.ort] + \" \" + sizeClasses[type];\r\n            }\r\n\r\n            function addSpread(offset, value, type) {\r\n                // Apply the filter function, if it is set.\r\n                type = filterFunc ? filterFunc(value, type) : type;\r\n\r\n                if (type === PIPS_NONE) {\r\n                    return;\r\n                }\r\n\r\n                // Add a marker for every point\r\n                var node = addNodeTo(element, false);\r\n                node.className = getClasses(type, options.cssClasses.marker);\r\n                node.style[options.style] = offset + \"%\";\r\n\r\n                // Values are only appended for points marked '1' or '2'.\r\n                if (type > PIPS_NO_VALUE) {\r\n                    node = addNodeTo(element, false);\r\n                    node.className = getClasses(type, options.cssClasses.value);\r\n                    node.setAttribute(\"data-value\", value);\r\n                    node.style[options.style] = offset + \"%\";\r\n                    node.innerHTML = formatter.to(value);\r\n                }\r\n            }\r\n\r\n            // Append all points.\r\n            Object.keys(spread).forEach(function(offset) {\r\n                addSpread(offset, spread[offset][0], spread[offset][1]);\r\n            });\r\n\r\n            return element;\r\n        }\r\n\r\n        function removePips() {\r\n            if (scope_Pips) {\r\n                removeElement(scope_Pips);\r\n                scope_Pips = null;\r\n            }\r\n        }\r\n\r\n        function pips(grid) {\r\n            // Fix #669\r\n            removePips();\r\n\r\n            var mode = grid.mode;\r\n            var density = grid.density || 1;\r\n            var filter = grid.filter || false;\r\n            var values = grid.values || false;\r\n            var stepped = grid.stepped || false;\r\n            var group = getGroup(mode, values, stepped);\r\n            var spread = generateSpread(density, mode, group);\r\n            var format = grid.format || {\r\n                to: Math.round\r\n            };\r\n\r\n            scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));\r\n\r\n            return scope_Pips;\r\n        }\r\n\r\n        // Shorthand for base dimensions.\r\n        function baseSize() {\r\n            var rect = scope_Base.getBoundingClientRect();\r\n            var alt = \"offset\" + [\"Width\", \"Height\"][options.ort];\r\n            return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];\r\n        }\r\n\r\n        // Handler for attaching events trough a proxy.\r\n        function attachEvent(events, element, callback, data) {\r\n            // This function can be used to 'filter' events to the slider.\r\n            // element is a node, not a nodeList\r\n\r\n            var method = function(e) {\r\n                e = fixEvent(e, data.pageOffset, data.target || element);\r\n\r\n                // fixEvent returns false if this event has a different target\r\n                // when handling (multi-) touch events;\r\n                if (!e) {\r\n                    return false;\r\n                }\r\n\r\n                // doNotReject is passed by all end events to make sure released touches\r\n                // are not rejected, leaving the slider \"stuck\" to the cursor;\r\n                if (scope_Target.hasAttribute(\"disabled\") && !data.doNotReject) {\r\n                    return false;\r\n                }\r\n\r\n                // Stop if an active 'tap' transition is taking place.\r\n                if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {\r\n                    return false;\r\n                }\r\n\r\n                // Ignore right or middle clicks on start #454\r\n                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {\r\n                    return false;\r\n                }\r\n\r\n                // Ignore right or middle clicks on start #454\r\n                if (data.hover && e.buttons) {\r\n                    return false;\r\n                }\r\n\r\n                // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.\r\n                // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support\r\n                // touch-action: manipulation, but that allows panning, which breaks\r\n                // sliders after zooming/on non-responsive pages.\r\n                // See: https://bugs.webkit.org/show_bug.cgi?id=133112\r\n                if (!supportsPassive) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                e.calcPoint = e.points[options.ort];\r\n\r\n                // Call the event handler with the event [ and additional data ].\r\n                callback(e, data);\r\n            };\r\n\r\n            var methods = [];\r\n\r\n            // Bind a closure on the target for every event type.\r\n            events.split(\" \").forEach(function(eventName) {\r\n                element.addEventListener(eventName, method, supportsPassive ? { passive: true } : false);\r\n                methods.push([eventName, method]);\r\n            });\r\n\r\n            return methods;\r\n        }\r\n\r\n        // Provide a clean event with standardized offset values.\r\n        function fixEvent(e, pageOffset, eventTarget) {\r\n            // Filter the event to register the type, which can be\r\n            // touch, mouse or pointer. Offset changes need to be\r\n            // made on an event specific basis.\r\n            var touch = e.type.indexOf(\"touch\") === 0;\r\n            var mouse = e.type.indexOf(\"mouse\") === 0;\r\n            var pointer = e.type.indexOf(\"pointer\") === 0;\r\n\r\n            var x;\r\n            var y;\r\n\r\n            // IE10 implemented pointer events with a prefix;\r\n            if (e.type.indexOf(\"MSPointer\") === 0) {\r\n                pointer = true;\r\n            }\r\n\r\n            // The only thing one handle should be concerned about is the touches that originated on top of it.\r\n            if (touch) {\r\n                // Returns true if a touch originated on the target.\r\n                var isTouchOnTarget = function(checkTouch) {\r\n                    return checkTouch.target === eventTarget || eventTarget.contains(checkTouch.target);\r\n                };\r\n\r\n                // In the case of touchstart events, we need to make sure there is still no more than one\r\n                // touch on the target so we look amongst all touches.\r\n                if (e.type === \"touchstart\") {\r\n                    var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);\r\n\r\n                    // Do not support more than one touch per handle.\r\n                    if (targetTouches.length > 1) {\r\n                        return false;\r\n                    }\r\n\r\n                    x = targetTouches[0].pageX;\r\n                    y = targetTouches[0].pageY;\r\n                } else {\r\n                    // In the other cases, find on changedTouches is enough.\r\n                    var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);\r\n\r\n                    // Cancel if the target touch has not moved.\r\n                    if (!targetTouch) {\r\n                        return false;\r\n                    }\r\n\r\n                    x = targetTouch.pageX;\r\n                    y = targetTouch.pageY;\r\n                }\r\n            }\r\n\r\n            pageOffset = pageOffset || getPageOffset(scope_Document);\r\n\r\n            if (mouse || pointer) {\r\n                x = e.clientX + pageOffset.x;\r\n                y = e.clientY + pageOffset.y;\r\n            }\r\n\r\n            e.pageOffset = pageOffset;\r\n            e.points = [x, y];\r\n            e.cursor = mouse || pointer; // Fix #435\r\n\r\n            return e;\r\n        }\r\n\r\n        // Translate a coordinate in the document to a percentage on the slider\r\n        function calcPointToPercentage(calcPoint) {\r\n            var location = calcPoint - offset(scope_Base, options.ort);\r\n            var proposal = (location * 100) / baseSize();\r\n\r\n            // Clamp proposal between 0% and 100%\r\n            // Out-of-bound coordinates may occur when .noUi-base pseudo-elements\r\n            // are used (e.g. contained handles feature)\r\n            proposal = limit(proposal);\r\n\r\n            return options.dir ? 100 - proposal : proposal;\r\n        }\r\n\r\n        // Find handle closest to a certain percentage on the slider\r\n        function getClosestHandle(proposal) {\r\n            var closest = 100;\r\n            var handleNumber = false;\r\n\r\n            scope_Handles.forEach(function(handle, index) {\r\n                // Disabled handles are ignored\r\n                if (handle.hasAttribute(\"disabled\")) {\r\n                    return;\r\n                }\r\n\r\n                var pos = Math.abs(scope_Locations[index] - proposal);\r\n\r\n                if (pos < closest || (pos === 100 && closest === 100)) {\r\n                    handleNumber = index;\r\n                    closest = pos;\r\n                }\r\n            });\r\n\r\n            return handleNumber;\r\n        }\r\n\r\n        // Fire 'end' when a mouse or pen leaves the document.\r\n        function documentLeave(event, data) {\r\n            if (event.type === \"mouseout\" && event.target.nodeName === \"HTML\" && event.relatedTarget === null) {\r\n                eventEnd(event, data);\r\n            }\r\n        }\r\n\r\n        // Handle movement on document for handle and range drag.\r\n        function eventMove(event, data) {\r\n            // Fix #498\r\n            // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).\r\n            // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero\r\n            // IE9 has .buttons and .which zero on mousemove.\r\n            // Firefox breaks the spec MDN defines.\r\n            if (navigator.appVersion.indexOf(\"MSIE 9\") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {\r\n                return eventEnd(event, data);\r\n            }\r\n\r\n            // Check if we are moving up or down\r\n            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);\r\n\r\n            // Convert the movement into a percentage of the slider width/height\r\n            var proposal = (movement * 100) / data.baseSize;\r\n\r\n            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);\r\n        }\r\n\r\n        // Unbind move events on document, call callbacks.\r\n        function eventEnd(event, data) {\r\n            // The handle is no longer active, so remove the class.\r\n            if (data.handle) {\r\n                removeClass(data.handle, options.cssClasses.active);\r\n                scope_ActiveHandlesCount -= 1;\r\n            }\r\n\r\n            // Unbind the move and end events, which are added on 'start'.\r\n            data.listeners.forEach(function(c) {\r\n                scope_DocumentElement.removeEventListener(c[0], c[1]);\r\n            });\r\n\r\n            if (scope_ActiveHandlesCount === 0) {\r\n                // Remove dragging class.\r\n                removeClass(scope_Target, options.cssClasses.drag);\r\n                setZindex();\r\n\r\n                // Remove cursor styles and text-selection events bound to the body.\r\n                if (event.cursor) {\r\n                    scope_Body.style.cursor = \"\";\r\n                    scope_Body.removeEventListener(\"selectstart\", preventDefault);\r\n                }\r\n            }\r\n\r\n            data.handleNumbers.forEach(function(handleNumber) {\r\n                fireEvent(\"change\", handleNumber);\r\n                fireEvent(\"set\", handleNumber);\r\n                fireEvent(\"end\", handleNumber);\r\n            });\r\n        }\r\n\r\n        // Bind move events on document.\r\n        function eventStart(event, data) {\r\n            var handle;\r\n            if (data.handleNumbers.length === 1) {\r\n                var handleOrigin = scope_Handles[data.handleNumbers[0]];\r\n\r\n                // Ignore 'disabled' handles\r\n                if (handleOrigin.hasAttribute(\"disabled\")) {\r\n                    return false;\r\n                }\r\n\r\n                handle = handleOrigin.children[0];\r\n                scope_ActiveHandlesCount += 1;\r\n\r\n                // Mark the handle as 'active' so it can be styled.\r\n                addClass(handle, options.cssClasses.active);\r\n            }\r\n\r\n            // A drag should never propagate up to the 'tap' event.\r\n            event.stopPropagation();\r\n\r\n            // Record the event listeners.\r\n            var listeners = [];\r\n\r\n            // Attach the move and end events.\r\n            var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {\r\n                // The event target has changed so we need to propagate the original one so that we keep\r\n                // relying on it to extract target touches.\r\n                target: event.target,\r\n                handle: handle,\r\n                listeners: listeners,\r\n                startCalcPoint: event.calcPoint,\r\n                baseSize: baseSize(),\r\n                pageOffset: event.pageOffset,\r\n                handleNumbers: data.handleNumbers,\r\n                buttonsProperty: event.buttons,\r\n                locations: scope_Locations.slice()\r\n            });\r\n\r\n            var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {\r\n                target: event.target,\r\n                handle: handle,\r\n                listeners: listeners,\r\n                doNotReject: true,\r\n                handleNumbers: data.handleNumbers\r\n            });\r\n\r\n            var outEvent = attachEvent(\"mouseout\", scope_DocumentElement, documentLeave, {\r\n                target: event.target,\r\n                handle: handle,\r\n                listeners: listeners,\r\n                doNotReject: true,\r\n                handleNumbers: data.handleNumbers\r\n            });\r\n\r\n            // We want to make sure we pushed the listeners in the listener list rather than creating\r\n            // a new one as it has already been passed to the event handlers.\r\n            listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));\r\n\r\n            // Text selection isn't an issue on touch devices,\r\n            // so adding cursor styles can be skipped.\r\n            if (event.cursor) {\r\n                // Prevent the 'I' cursor and extend the range-drag cursor.\r\n                scope_Body.style.cursor = getComputedStyle(event.target).cursor;\r\n\r\n                // Mark the target with a dragging state.\r\n                if (scope_Handles.length > 1) {\r\n                    addClass(scope_Target, options.cssClasses.drag);\r\n                }\r\n\r\n                // Prevent text selection when dragging the handles.\r\n                // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,\r\n                // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,\r\n                // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.\r\n                // The 'cursor' flag is false.\r\n                // See: http://caniuse.com/#search=selectstart\r\n                scope_Body.addEventListener(\"selectstart\", preventDefault, false);\r\n            }\r\n\r\n            data.handleNumbers.forEach(function(handleNumber) {\r\n                fireEvent(\"start\", handleNumber);\r\n            });\r\n        }\r\n\r\n        // Move closest handle to tapped location.\r\n        function eventTap(event) {\r\n            // The tap event shouldn't propagate up\r\n            event.stopPropagation();\r\n\r\n            var proposal = calcPointToPercentage(event.calcPoint);\r\n            var handleNumber = getClosestHandle(proposal);\r\n\r\n            // Tackle the case that all handles are 'disabled'.\r\n            if (handleNumber === false) {\r\n                return false;\r\n            }\r\n\r\n            // Flag the slider as it is now in a transitional state.\r\n            // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.\r\n            if (!options.events.snap) {\r\n                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\r\n            }\r\n\r\n            setHandle(handleNumber, proposal, true, true);\r\n\r\n            setZindex();\r\n\r\n            fireEvent(\"slide\", handleNumber, true);\r\n            fireEvent(\"update\", handleNumber, true);\r\n            fireEvent(\"change\", handleNumber, true);\r\n            fireEvent(\"set\", handleNumber, true);\r\n\r\n            if (options.events.snap) {\r\n                eventStart(event, { handleNumbers: [handleNumber] });\r\n            }\r\n        }\r\n\r\n        // Fires a 'hover' event for a hovered mouse/pen position.\r\n        function eventHover(event) {\r\n            var proposal = calcPointToPercentage(event.calcPoint);\r\n\r\n            var to = scope_Spectrum.getStep(proposal);\r\n            var value = scope_Spectrum.fromStepping(to);\r\n\r\n            Object.keys(scope_Events).forEach(function(targetEvent) {\r\n                if (\"hover\" === targetEvent.split(\".\")[0]) {\r\n                    scope_Events[targetEvent].forEach(function(callback) {\r\n                        callback.call(scope_Self, value);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        // Attach events to several slider parts.\r\n        function bindSliderEvents(behaviour) {\r\n            // Attach the standard drag event to the handles.\r\n            if (!behaviour.fixed) {\r\n                scope_Handles.forEach(function(handle, index) {\r\n                    // These events are only bound to the visual handle\r\n                    // element, not the 'real' origin element.\r\n                    attachEvent(actions.start, handle.children[0], eventStart, {\r\n                        handleNumbers: [index]\r\n                    });\r\n                });\r\n            }\r\n\r\n            // Attach the tap event to the slider base.\r\n            if (behaviour.tap) {\r\n                attachEvent(actions.start, scope_Base, eventTap, {});\r\n            }\r\n\r\n            // Fire hover events\r\n            if (behaviour.hover) {\r\n                attachEvent(actions.move, scope_Base, eventHover, {\r\n                    hover: true\r\n                });\r\n            }\r\n\r\n            // Make the range draggable.\r\n            if (behaviour.drag) {\r\n                scope_Connects.forEach(function(connect, index) {\r\n                    if (connect === false || index === 0 || index === scope_Connects.length - 1) {\r\n                        return;\r\n                    }\r\n\r\n                    var handleBefore = scope_Handles[index - 1];\r\n                    var handleAfter = scope_Handles[index];\r\n                    var eventHolders = [connect];\r\n\r\n                    addClass(connect, options.cssClasses.draggable);\r\n\r\n                    // When the range is fixed, the entire range can\r\n                    // be dragged by the handles. The handle in the first\r\n                    // origin will propagate the start event upward,\r\n                    // but it needs to be bound manually on the other.\r\n                    if (behaviour.fixed) {\r\n                        eventHolders.push(handleBefore.children[0]);\r\n                        eventHolders.push(handleAfter.children[0]);\r\n                    }\r\n\r\n                    eventHolders.forEach(function(eventHolder) {\r\n                        attachEvent(actions.start, eventHolder, eventStart, {\r\n                            handles: [handleBefore, handleAfter],\r\n                            handleNumbers: [index - 1, index]\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Attach an event to this slider, possibly including a namespace\r\n        function bindEvent(namespacedEvent, callback) {\r\n            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];\r\n            scope_Events[namespacedEvent].push(callback);\r\n\r\n            // If the event bound is 'update,' fire it immediately for all handles.\r\n            if (namespacedEvent.split(\".\")[0] === \"update\") {\r\n                scope_Handles.forEach(function(a, index) {\r\n                    fireEvent(\"update\", index);\r\n                });\r\n            }\r\n        }\r\n\r\n        // Undo attachment of event\r\n        function removeEvent(namespacedEvent) {\r\n            var event = namespacedEvent && namespacedEvent.split(\".\")[0];\r\n            var namespace = event && namespacedEvent.substring(event.length);\r\n\r\n            Object.keys(scope_Events).forEach(function(bind) {\r\n                var tEvent = bind.split(\".\")[0];\r\n                var tNamespace = bind.substring(tEvent.length);\r\n\r\n                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {\r\n                    delete scope_Events[bind];\r\n                }\r\n            });\r\n        }\r\n\r\n        // External event handling\r\n        function fireEvent(eventName, handleNumber, tap) {\r\n            Object.keys(scope_Events).forEach(function(targetEvent) {\r\n                var eventType = targetEvent.split(\".\")[0];\r\n\r\n                if (eventName === eventType) {\r\n                    scope_Events[targetEvent].forEach(function(callback) {\r\n                        callback.call(\r\n                            // Use the slider public API as the scope ('this')\r\n                            scope_Self,\r\n                            // Return values as array, so arg_1[arg_2] is always valid.\r\n                            scope_Values.map(options.format.to),\r\n                            // Handle index, 0 or 1\r\n                            handleNumber,\r\n                            // Un-formatted slider values\r\n                            scope_Values.slice(),\r\n                            // Event is fired by tap, true or false\r\n                            tap || false,\r\n                            // Left offset of the handle, in relation to the slider\r\n                            scope_Locations.slice()\r\n                        );\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        function toPct(pct) {\r\n            return pct + \"%\";\r\n        }\r\n\r\n        // Split out the handle positioning logic so the Move event can use it, too\r\n        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {\r\n            // For sliders with multiple handles, limit movement to the other handle.\r\n            // Apply the margin option by adding it to the handle positions.\r\n            if (scope_Handles.length > 1 && !options.events.unconstrained) {\r\n                if (lookBackward && handleNumber > 0) {\r\n                    to = Math.max(to, reference[handleNumber - 1] + options.margin);\r\n                }\r\n\r\n                if (lookForward && handleNumber < scope_Handles.length - 1) {\r\n                    to = Math.min(to, reference[handleNumber + 1] - options.margin);\r\n                }\r\n            }\r\n\r\n            // The limit option has the opposite effect, limiting handles to a\r\n            // maximum distance from another. Limit must be > 0, as otherwise\r\n            // handles would be unmovable.\r\n            if (scope_Handles.length > 1 && options.limit) {\r\n                if (lookBackward && handleNumber > 0) {\r\n                    to = Math.min(to, reference[handleNumber - 1] + options.limit);\r\n                }\r\n\r\n                if (lookForward && handleNumber < scope_Handles.length - 1) {\r\n                    to = Math.max(to, reference[handleNumber + 1] - options.limit);\r\n                }\r\n            }\r\n\r\n            // The padding option keeps the handles a certain distance from the\r\n            // edges of the slider. Padding must be > 0.\r\n            if (options.padding) {\r\n                if (handleNumber === 0) {\r\n                    to = Math.max(to, options.padding[0]);\r\n                }\r\n\r\n                if (handleNumber === scope_Handles.length - 1) {\r\n                    to = Math.min(to, 100 - options.padding[1]);\r\n                }\r\n            }\r\n\r\n            to = scope_Spectrum.getStep(to);\r\n\r\n            // Limit percentage to the 0 - 100 range\r\n            to = limit(to);\r\n\r\n            // Return false if handle can't move\r\n            if (to === reference[handleNumber] && !getValue) {\r\n                return false;\r\n            }\r\n\r\n            return to;\r\n        }\r\n\r\n        // Uses slider orientation to create CSS rules. a = base value;\r\n        function inRuleOrder(v, a) {\r\n            var o = options.ort;\r\n            return (o ? a : v) + \", \" + (o ? v : a);\r\n        }\r\n\r\n        // Moves handle(s) by a percentage\r\n        // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])\r\n        function moveHandles(upward, proposal, locations, handleNumbers) {\r\n            var proposals = locations.slice();\r\n\r\n            var b = [!upward, upward];\r\n            var f = [upward, !upward];\r\n\r\n            // Copy handleNumbers so we don't change the dataset\r\n            handleNumbers = handleNumbers.slice();\r\n\r\n            // Check to see which handle is 'leading'.\r\n            // If that one can't move the second can't either.\r\n            if (upward) {\r\n                handleNumbers.reverse();\r\n            }\r\n\r\n            // Step 1: get the maximum percentage that any of the handles can move\r\n            if (handleNumbers.length > 1) {\r\n                handleNumbers.forEach(function(handleNumber, o) {\r\n                    var to = checkHandlePosition(\r\n                        proposals,\r\n                        handleNumber,\r\n                        proposals[handleNumber] + proposal,\r\n                        b[o],\r\n                        f[o],\r\n                        false\r\n                    );\r\n\r\n                    // Stop if one of the handles can't move.\r\n                    if (to === false) {\r\n                        proposal = 0;\r\n                    } else {\r\n                        proposal = to - proposals[handleNumber];\r\n                        proposals[handleNumber] = to;\r\n                    }\r\n                });\r\n            }\r\n\r\n            // If using one handle, check backward AND forward\r\n            else {\r\n                b = f = [true];\r\n            }\r\n\r\n            var state = false;\r\n\r\n            // Step 2: Try to set the handles with the found percentage\r\n            handleNumbers.forEach(function(handleNumber, o) {\r\n                state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;\r\n            });\r\n\r\n            // Step 3: If a handle moved, fire events\r\n            if (state) {\r\n                handleNumbers.forEach(function(handleNumber) {\r\n                    fireEvent(\"update\", handleNumber);\r\n                    fireEvent(\"slide\", handleNumber);\r\n                });\r\n            }\r\n        }\r\n\r\n        // Takes a base value and an offset. This offset is used for the connect bar size.\r\n        // In the initial design for this feature, the origin element was 1% wide.\r\n        // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature\r\n        // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223\r\n        function transformDirection(a, b) {\r\n            return options.dir ? 100 - a - b : a;\r\n        }\r\n\r\n        // Updates scope_Locations and scope_Values, updates visual state\r\n        function updateHandlePosition(handleNumber, to) {\r\n            // Update locations.\r\n            scope_Locations[handleNumber] = to;\r\n\r\n            // Convert the value to the slider stepping/range.\r\n            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);\r\n\r\n            var rule = \"translate(\" + inRuleOrder(toPct(transformDirection(to, 0) - scope_DirOffset), \"0\") + \")\";\r\n            scope_Handles[handleNumber].style[options.transformRule] = rule;\r\n\r\n            updateConnect(handleNumber);\r\n            updateConnect(handleNumber + 1);\r\n        }\r\n\r\n        // Handles before the slider middle are stacked later = higher,\r\n        // Handles after the middle later is lower\r\n        // [[7] [8] .......... | .......... [5] [4]\r\n        function setZindex() {\r\n            scope_HandleNumbers.forEach(function(handleNumber) {\r\n                var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;\r\n                var zIndex = 3 + (scope_Handles.length + dir * handleNumber);\r\n                scope_Handles[handleNumber].style.zIndex = zIndex;\r\n            });\r\n        }\r\n\r\n        // Test suggested values and apply margin, step.\r\n        function setHandle(handleNumber, to, lookBackward, lookForward) {\r\n            to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);\r\n\r\n            if (to === false) {\r\n                return false;\r\n            }\r\n\r\n            updateHandlePosition(handleNumber, to);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Updates style attribute for connect nodes\r\n        function updateConnect(index) {\r\n            // Skip connects set to false\r\n            if (!scope_Connects[index]) {\r\n                return;\r\n            }\r\n\r\n            var l = 0;\r\n            var h = 100;\r\n\r\n            if (index !== 0) {\r\n                l = scope_Locations[index - 1];\r\n            }\r\n\r\n            if (index !== scope_Connects.length - 1) {\r\n                h = scope_Locations[index];\r\n            }\r\n\r\n            // We use two rules:\r\n            // 'translate' to change the left/top offset;\r\n            // 'scale' to change the width of the element;\r\n            // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)\r\n            var connectWidth = h - l;\r\n            var translateRule = \"translate(\" + inRuleOrder(toPct(transformDirection(l, connectWidth)), \"0\") + \")\";\r\n            var scaleRule = \"scale(\" + inRuleOrder(connectWidth / 100, \"1\") + \")\";\r\n\r\n            scope_Connects[index].style[options.transformRule] = translateRule + \" \" + scaleRule;\r\n        }\r\n\r\n        // Parses value passed to .set method. Returns current value if not parse-able.\r\n        function resolveToValue(to, handleNumber) {\r\n            // Setting with null indicates an 'ignore'.\r\n            // Inputting 'false' is invalid.\r\n            if (to === null || to === false || to === undefined) {\r\n                return scope_Locations[handleNumber];\r\n            }\r\n\r\n            // If a formatted number was passed, attempt to decode it.\r\n            if (typeof to === \"number\") {\r\n                to = String(to);\r\n            }\r\n\r\n            to = options.format.from(to);\r\n            to = scope_Spectrum.toStepping(to);\r\n\r\n            // If parsing the number failed, use the current value.\r\n            if (to === false || isNaN(to)) {\r\n                return scope_Locations[handleNumber];\r\n            }\r\n\r\n            return to;\r\n        }\r\n\r\n        // Set the slider value.\r\n        function valueSet(input, fireSetEvent) {\r\n            var values = asArray(input);\r\n            var isInit = scope_Locations[0] === undefined;\r\n\r\n            // Event fires by default\r\n            fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent;\r\n\r\n            // Animation is optional.\r\n            // Make sure the initial values were set before using animated placement.\r\n            if (options.animate && !isInit) {\r\n                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\r\n            }\r\n\r\n            // First pass, without lookAhead but with lookBackward. Values are set from left to right.\r\n            scope_HandleNumbers.forEach(function(handleNumber) {\r\n                setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false);\r\n            });\r\n\r\n            // Second pass. Now that all base values are set, apply constraints\r\n            scope_HandleNumbers.forEach(function(handleNumber) {\r\n                setHandle(handleNumber, scope_Locations[handleNumber], true, true);\r\n            });\r\n\r\n            setZindex();\r\n\r\n            scope_HandleNumbers.forEach(function(handleNumber) {\r\n                fireEvent(\"update\", handleNumber);\r\n\r\n                // Fire the event only for handles that received a new value, as per #579\r\n                if (values[handleNumber] !== null && fireSetEvent) {\r\n                    fireEvent(\"set\", handleNumber);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Reset slider to initial values\r\n        function valueReset(fireSetEvent) {\r\n            valueSet(options.start, fireSetEvent);\r\n        }\r\n\r\n        // Set value for a single handle\r\n        function valueSetHandle(handleNumber, value, fireSetEvent) {\r\n            var values = [];\r\n\r\n            // Ensure numeric input\r\n            handleNumber = Number(handleNumber);\r\n\r\n            if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {\r\n                throw new Error(\"noUiSlider (\" + VERSION + \"): invalid handle number, got: \" + handleNumber);\r\n            }\r\n\r\n            for (var i = 0; i < scope_HandleNumbers.length; i++) {\r\n                values[i] = null;\r\n            }\r\n\r\n            values[handleNumber] = value;\r\n\r\n            valueSet(values, fireSetEvent);\r\n        }\r\n\r\n        // Get the slider value.\r\n        function valueGet() {\r\n            var values = scope_Values.map(options.format.to);\r\n\r\n            // If only one handle is used, return a single value.\r\n            if (values.length === 1) {\r\n                return values[0];\r\n            }\r\n\r\n            return values;\r\n        }\r\n\r\n        // Removes classes from the root and empties it.\r\n        function destroy() {\r\n            for (var key in options.cssClasses) {\r\n                if (!options.cssClasses.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                removeClass(scope_Target, options.cssClasses[key]);\r\n            }\r\n\r\n            while (scope_Target.firstChild) {\r\n                scope_Target.removeChild(scope_Target.firstChild);\r\n            }\r\n\r\n            delete scope_Target.noUiSlider;\r\n        }\r\n\r\n        // Get the current step size for the slider.\r\n        function getCurrentStep() {\r\n            // Check all locations, map them to their stepping point.\r\n            // Get the step point, then find it in the input list.\r\n            return scope_Locations.map(function(location, index) {\r\n                var nearbySteps = scope_Spectrum.getNearbySteps(location);\r\n                var value = scope_Values[index];\r\n                var increment = nearbySteps.thisStep.step;\r\n                var decrement = null;\r\n\r\n                // If the next value in this step moves into the next step,\r\n                // the increment is the start of the next step - the current value\r\n                if (increment !== false) {\r\n                    if (value + increment > nearbySteps.stepAfter.startValue) {\r\n                        increment = nearbySteps.stepAfter.startValue - value;\r\n                    }\r\n                }\r\n\r\n                // If the value is beyond the starting point\r\n                if (value > nearbySteps.thisStep.startValue) {\r\n                    decrement = nearbySteps.thisStep.step;\r\n                } else if (nearbySteps.stepBefore.step === false) {\r\n                    decrement = false;\r\n                }\r\n\r\n                // If a handle is at the start of a step, it always steps back into the previous step first\r\n                else {\r\n                    decrement = value - nearbySteps.stepBefore.highestStep;\r\n                }\r\n\r\n                // Now, if at the slider edges, there is not in/decrement\r\n                if (location === 100) {\r\n                    increment = null;\r\n                } else if (location === 0) {\r\n                    decrement = null;\r\n                }\r\n\r\n                // As per #391, the comparison for the decrement step can have some rounding issues.\r\n                var stepDecimals = scope_Spectrum.countStepDecimals();\r\n\r\n                // Round per #391\r\n                if (increment !== null && increment !== false) {\r\n                    increment = Number(increment.toFixed(stepDecimals));\r\n                }\r\n\r\n                if (decrement !== null && decrement !== false) {\r\n                    decrement = Number(decrement.toFixed(stepDecimals));\r\n                }\r\n\r\n                return [decrement, increment];\r\n            });\r\n        }\r\n\r\n        // Updateable: margin, limit, padding, step, range, animate, snap\r\n        function updateOptions(optionsToUpdate, fireSetEvent) {\r\n            // Spectrum is created using the range, snap, direction and step options.\r\n            // 'snap' and 'step' can be updated.\r\n            // If 'snap' and 'step' are not passed, they should remain unchanged.\r\n            var v = valueGet();\r\n\r\n            var updateAble = [\"margin\", \"limit\", \"padding\", \"range\", \"animate\", \"snap\", \"step\", \"format\"];\r\n\r\n            // Only change options that we're actually passed to update.\r\n            updateAble.forEach(function(name) {\r\n                if (optionsToUpdate[name] !== undefined) {\r\n                    originalOptions[name] = optionsToUpdate[name];\r\n                }\r\n            });\r\n\r\n            var newOptions = testOptions(originalOptions);\r\n\r\n            // Load new options into the slider state\r\n            updateAble.forEach(function(name) {\r\n                if (optionsToUpdate[name] !== undefined) {\r\n                    options[name] = newOptions[name];\r\n                }\r\n            });\r\n\r\n            scope_Spectrum = newOptions.spectrum;\r\n\r\n            // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)\r\n            options.margin = newOptions.margin;\r\n            options.limit = newOptions.limit;\r\n            options.padding = newOptions.padding;\r\n\r\n            // Update pips, removes existing.\r\n            if (options.pips) {\r\n                pips(options.pips);\r\n            }\r\n\r\n            // Invalidate the current positioning so valueSet forces an update.\r\n            scope_Locations = [];\r\n            valueSet(optionsToUpdate.start || v, fireSetEvent);\r\n        }\r\n\r\n        // Create the base element, initialize HTML and set classes.\r\n        // Add handles and connect elements.\r\n        scope_Base = addSlider(scope_Target);\r\n        addElements(options.connect, scope_Base);\r\n\r\n        // Attach user events.\r\n        bindSliderEvents(options.events);\r\n\r\n        // Use the public value method to set the start values.\r\n        valueSet(options.start);\r\n\r\n        // noinspection JSUnusedGlobalSymbols\r\n        scope_Self = {\r\n            destroy: destroy,\r\n            steps: getCurrentStep,\r\n            on: bindEvent,\r\n            off: removeEvent,\r\n            get: valueGet,\r\n            set: valueSet,\r\n            setHandle: valueSetHandle,\r\n            reset: valueReset,\r\n            // Exposed for unit testing, don't use this in your application.\r\n            __moveHandles: function(a, b, c) {\r\n                moveHandles(a, b, scope_Locations, c);\r\n            },\r\n            options: originalOptions, // Issue #600, #678\r\n            updateOptions: updateOptions,\r\n            target: scope_Target, // Issue #597\r\n            removePips: removePips,\r\n            pips: pips // Issue #594\r\n        };\r\n\r\n        if (options.pips) {\r\n            pips(options.pips);\r\n        }\r\n\r\n        if (options.tooltips) {\r\n            tooltips();\r\n        }\r\n\r\n        aria();\r\n\r\n        return scope_Self;\r\n    }\r\n\r\n    // Run the standard initializer\r\n    function initialize(target, originalOptions) {\r\n        if (!target || !target.nodeName) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): create requires a single element, got: \" + target);\r\n        }\r\n\r\n        // Throw an error if the slider was already initialized.\r\n        if (target.noUiSlider) {\r\n            throw new Error(\"noUiSlider (\" + VERSION + \"): Slider was already initialized.\");\r\n        }\r\n\r\n        // Test the options and create the slider environment;\r\n        var options = testOptions(originalOptions, target);\r\n        var api = scope(target, options, originalOptions);\r\n\r\n        target.noUiSlider = api;\r\n\r\n        return api;\r\n    }\r\n\r\n    // Use an object instead of a function for future expandability;\r\n    return {\r\n        // Exposed for unit testing, don't use this in your application.\r\n        __spectrum: Spectrum,\r\n        version: VERSION,\r\n        create: initialize\r\n    };\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/nouislider/distribute/nouislider.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/js/entry.js":
/*!*************************!*\
  !*** ./src/js/entry.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.debounce */ \"./node_modules/lodash.debounce/index.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_is_mobile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/is-mobile */ \"./src/js/utils/is-mobile.js\");\n/* harmony import */ var _graphic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./graphic */ \"./src/js/graphic.js\");\n/* global d3 */\n\n\n\nvar $body = d3.select('body');\nvar previousWidth = 0;\n\nfunction resize() {\n  // only do resize on width changes, not height\n  // (remove the conditional if you want to trigger on height change)\n  var width = $body.node().offsetWidth;\n\n  if (previousWidth !== width) {\n    previousWidth = width;\n    _graphic__WEBPACK_IMPORTED_MODULE_2__[\"default\"].resize();\n  }\n}\n\nfunction setupStickyHeader() {\n  var $header = $body.select('header');\n\n  if ($header.classed('is-sticky')) {\n    var $menu = $body.select('.header__menu');\n    var $toggle = $body.select('.header__toggle');\n    $toggle.on('click', function () {\n      var visible = $menu.classed('is-visible');\n      $menu.classed('is-visible', !visible);\n      $toggle.classed('is-visible', !visible);\n    });\n  }\n}\n\nfunction init() {\n  // add mobile class to body tag\n  $body.classed('is-mobile', _utils_is_mobile__WEBPACK_IMPORTED_MODULE_1__[\"default\"].any()); // setup resize event\n\n  window.addEventListener('resize', lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default()(resize, 150)); // setup sticky header menu\n\n  setupStickyHeader(); // kick off graphic code\n\n  _graphic__WEBPACK_IMPORTED_MODULE_2__[\"default\"].init();\n}\n\ninit();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZW50cnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZW50cnkuanM/NzBlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgZDMgKi9cbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2guZGVib3VuY2UnO1xuaW1wb3J0IGlzTW9iaWxlIGZyb20gJy4vdXRpbHMvaXMtbW9iaWxlJztcbmltcG9ydCBncmFwaGljIGZyb20gJy4vZ3JhcGhpYyc7XG5cbmNvbnN0ICRib2R5ID0gZDMuc2VsZWN0KCdib2R5Jyk7XG5sZXQgcHJldmlvdXNXaWR0aCA9IDA7XG5cbmZ1bmN0aW9uIHJlc2l6ZSgpIHtcblx0Ly8gb25seSBkbyByZXNpemUgb24gd2lkdGggY2hhbmdlcywgbm90IGhlaWdodFxuXHQvLyAocmVtb3ZlIHRoZSBjb25kaXRpb25hbCBpZiB5b3Ugd2FudCB0byB0cmlnZ2VyIG9uIGhlaWdodCBjaGFuZ2UpXG5cdGNvbnN0IHdpZHRoID0gJGJvZHkubm9kZSgpLm9mZnNldFdpZHRoO1xuXHRpZiAocHJldmlvdXNXaWR0aCAhPT0gd2lkdGgpIHtcblx0XHRwcmV2aW91c1dpZHRoID0gd2lkdGg7XG5cdFx0Z3JhcGhpYy5yZXNpemUoKTtcblx0fVxufVxuXG5mdW5jdGlvbiBzZXR1cFN0aWNreUhlYWRlcigpIHtcblx0Y29uc3QgJGhlYWRlciA9ICRib2R5LnNlbGVjdCgnaGVhZGVyJyk7XG5cdGlmICgkaGVhZGVyLmNsYXNzZWQoJ2lzLXN0aWNreScpKSB7XG5cdFx0Y29uc3QgJG1lbnUgPSAkYm9keS5zZWxlY3QoJy5oZWFkZXJfX21lbnUnKTtcblx0XHRjb25zdCAkdG9nZ2xlID0gJGJvZHkuc2VsZWN0KCcuaGVhZGVyX190b2dnbGUnKTtcblx0XHQkdG9nZ2xlLm9uKCdjbGljaycsICgpID0+IHtcblx0XHRcdGNvbnN0IHZpc2libGUgPSAkbWVudS5jbGFzc2VkKCdpcy12aXNpYmxlJyk7XG5cdFx0XHQkbWVudS5jbGFzc2VkKCdpcy12aXNpYmxlJywgIXZpc2libGUpO1xuXHRcdFx0JHRvZ2dsZS5jbGFzc2VkKCdpcy12aXNpYmxlJywgIXZpc2libGUpO1xuXHRcdH0pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG5cdC8vIGFkZCBtb2JpbGUgY2xhc3MgdG8gYm9keSB0YWdcblx0JGJvZHkuY2xhc3NlZCgnaXMtbW9iaWxlJywgaXNNb2JpbGUuYW55KCkpO1xuXHQvLyBzZXR1cCByZXNpemUgZXZlbnRcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlKHJlc2l6ZSwgMTUwKSk7XG5cdC8vIHNldHVwIHN0aWNreSBoZWFkZXIgbWVudVxuXHRzZXR1cFN0aWNreUhlYWRlcigpO1xuXHQvLyBraWNrIG9mZiBncmFwaGljIGNvZGVcblx0Z3JhcGhpYy5pbml0KCk7XG59XG5cbmluaXQoKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/entry.js\n");

/***/ }),

/***/ "./src/js/graphic.js":
/*!***************************!*\
  !*** ./src/js/graphic.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nouislider */ \"./node_modules/nouislider/distribute/nouislider.js\");\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nouislider__WEBPACK_IMPORTED_MODULE_0__);\n/* global d3 */\n //import 'nouislider/distribute/nouislider.css';\n\nvar countStreak = 1;\nvar dragging = false;\nvar svg = null;\nvar fixedFace = null;\nvar faces = null;\nvar face = null;\nvar lines = null;\nvar faceAdjust = 0;\nvar globalGain = null;\nvar source2 = null;\nvar viewportWidth;\nvar viewportHeight;\nviewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\nviewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\nvar margin = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n},\n    width = Math.min(1100, viewportWidth) - margin.left - margin.right,\n    height = 712 - 112 - margin.top - margin.bottom;\nvar faceSize = Math.min((width - 40) / 5, 110);\nd3.select(\".ranking\").style(\"margin-left\", function () {\n  if (viewportWidth > 420) {\n    return faceSize / 2 + \"px\";\n  }\n\n  return null;\n});\n\nif (viewportWidth < 700) {\n  width = Math.floor(viewportWidth, 550);\n}\n\nif (viewportWidth < 421) {\n  width = viewportWidth - 0;\n  height = 550; //faceSize = Math.min(faceSize,(width)/5);\n} // if(viewportHeight - 112 < 600){\n// \theight = viewportHeight - 112;\n// }\n\n\nd3.select(\".chart\").style(\"width\", width + \"px\").style(\"height\", height + \"px\");\n\nfunction resize() {}\n\nfunction init() {\n  newCode();\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: init,\n  resize: resize\n});\n\nfunction newCode() {\n  var cumulativeStats = d3.select(\".cumulative-container\");\n  var n = 9,\n      duration = 1500,\n      now = new Date(Date.now() - duration);\n  var searchData;\n  var count = [];\n  var started = false;\n  var axis;\n  var chartData;\n  var nestedDatesTwo;\n  var imageData;\n  var shiftDuration = 3000;\n  var tickDelay;\n  var playLength = 0;\n  var startTime = 0;\n  var colorOne = \"#FF2F28\";\n  var colorTwo = \"#FF2F28\";\n  var context;\n  var bufferLoader;\n  var scratch;\n  var hit;\n  var source;\n  var lastSource;\n  var currentYear = 2019;\n  var windowFocus = 0;\n  var hidden;\n  var textAdjust = 6;\n  var textColor = \"#797979\";\n  var pathColor = \"#FFFFFF\";\n  var playing = false;\n  var muted = false;\n  var hidden;\n  var mobile = false;\n  var parseDate = d3.time.format(\"%Y-%m-%d\").parse;\n  var unParse = d3.time.format(\"%Y-%m-%d\");\n  var niceParse = d3.time.format(\"%b, '%y\");\n  var niceParseTwo = d3.time.format(\"%B %d, '%y\");\n  var niceParseThree = d3.time.format(\"%b %e, '%y\");\n\n  if (viewportWidth < 700) {\n    niceParseThree = d3.time.format(\"%b<br>%Y\");\n  }\n\n  var numParse = d3.time.format(\"%Y%m%d\");\n  var numParseDate = d3.time.format(\"%Y%m%d\").parse;\n  var sideBarParse = d3.time.format(\"%b '%y\");\n  var yearParse = d3.time.format(\"%Y\");\n  var uniqueRowsCsv = \"assets/data/my_unique_rows.csv\";\n  var startString = \"2019-01-01\";\n\n  if (/Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n    mobile = true;\n  }\n\n  var start = new Date(parseDate(startString)); //interate through 17 weeks by adding 7 to the start day\n\n  var dates = [start];\n  var i;\n\n  for (i = 0; i < 52; i++) {\n    var length = dates.length;\n    var date = d3.time.day.offset(dates[length - 1], 7);\n    dates.push(date);\n  }\n\n  var dateAhead = unParse(d3.time.day.offset(dates[0], 7));\n  var twoDatesAhead = unParse(d3.time.day.offset(dates[0], 14));\n  var currentDate = unParse(dates[0]);\n  $(document).ready(function () {\n    d3.csv(\"assets/data/my_all_rows.csv\", function (error, data) {\n      d3.csv(uniqueRowsCsv, function (error, songsUnique) {\n        if (/Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {}\n\n        var songsUniqueMap = d3.map(songsUnique, function (d) {\n          return d.key;\n        });\n        var x = d3.time.scale().domain([dates[0], dates[dates.length - 1]]).range([height, 0]);\n        var y = d3.scale.linear().domain([6, 1]).range([width, 0]);\n        var line = d3.svg.line().interpolate(\"linear\").x(function (d, i) {\n          return y(+d.rank);\n        }).y(function (d, i) {\n          return x(d.chart_date);\n        });\n        data.forEach(function (d) {\n          d.chart_date_num = d.chart_date;\n          d.chart_date = parseDate(d.chart_date); // d.id = d.title + \" by \" + d.artist;\n\n          d.id = d.track_id;\n\n          if (songsUniqueMap.has(d.id)) {} else {// console.log(d.id);\n          }\n\n          d.track_info = songsUniqueMap.get(d.id);\n        });\n        var artistData = d3.nest().key(function (d) {\n          return d.id;\n        }).entries(data);\n        var testDates = d3.nest().key(function (d) {\n          return d.chart_date_num.slice(0, 7);\n        }).entries(data.filter(function (d) {\n          return +d.rank < 6;\n        })); //chartdata is nested by artist\n\n        chartData = d3.nest().key(function (d) {\n          return d.id;\n        }).entries(data); //nestedDates is nested by week\n\n        var nestedDates = d3.nest().key(function (d) {\n          return d.chart_date_num;\n        }).entries(data);\n        var weeksForDateLines = nestedDates.map(function (d) {\n          return +d.key.replace(\"-\", \"\").replace(\"-\", \"\");\n        }).filter(function (d, i) {\n          return i % 4 == 0;\n        });\n\n        for (var i = 0; i < chartData.length; i++) {\n          //add peak to the top-level node\n          //rank by week\n          var dateRank = {};\n\n          for (var j = 0; j < chartData[i].values.length; j++) {\n            var date = chartData[i].values[j].chart_date_num;\n            var rank = chartData[i].values[j].rank;\n\n            if (rank < 6) {\n              dateRank[date] = rank;\n            }\n          }\n\n          chartData[i].nestedDateArray = dateRank;\n        }\n\n        var chartMap = d3.map(chartData, function (d) {\n          return d.key;\n        });\n\n        for (var date in testDates) {\n          for (var track in testDates[date].values) {\n            var item = chartMap.get(testDates[date].values[track].id);\n            testDates[date].values[track].nestedDateArray = item.nestedDateArray;\n            testDates[date].values[track].key = item.key;\n            testDates[date].values[track].values = item.values.filter(function (d) {\n              return +d.rank < 6;\n            });\n          }\n        }\n\n        testDates = d3.map(testDates, function (d) {\n          return d.key;\n        });\n        console.log(unParse(dates[0]).slice(0, 7));\n        var filteredData = testDates.get(unParse(dates[0]).slice(0, 7)).values;\n        var nextMonth = unParse(d3.time.month.offset(dates[0], 1)).slice(0, 7);\n        var filteredDataNext = testDates.get(unParse(d3.time.month.offset(dates[0], 1)).slice(0, 7)).values;\n        filteredData = _.unionBy(filteredData, filteredDataNext); //nestedDatesTwo is for the audio so that it knows what it will play each week\n\n        var nestedDatesTwo = {}; //sorts everything for getting the top ranked track that goes into nestedDatesTwo\n\n        for (var i in nestedDates) {\n          nestedDates[i].values.sort(function (a, b) {\n            return a.rank - b.rank;\n          });\n        } //nestedDates is the data nested by week\n\n\n        for (var i in nestedDates) {\n          var date = nestedDates[i].key;\n          nestedDatesTwo[date] = {\n            track: nestedDates[i][\"values\"][0][\"id\"],\n            preview: nestedDates[i][\"values\"][0][\"track_info\"][\"song_url\"],\n            artist: nestedDates[i][\"values\"][0][\"track_info\"][\"artist\"],\n            title: nestedDates[i][\"values\"][0][\"track_info\"][\"title\"]\n          };\n        } //week map for getting top ranked songs\n\n\n        var rankingMap = d3.map(nestedDates, function (d) {\n          return d.key;\n        });\n\n        function changeYear(changedYear) {\n          var duration1 = 800;\n          var duration2 = 400;\n          var filteredDataFirst = testDates.get(unParse(dates[0]).slice(0, 7)).values;\n\n          if (dates[0] <= new Date(parseDate(\"2019-01-01\"))) {\n            var filteredDataNext = testDates.get(unParse(d3.time.month.offset(dates[0], 1)).slice(0, 7)).values;\n            var filteredDataThird = testDates.get(unParse(d3.time.month.offset(dates[0], 2)).slice(0, 7)).values;\n            var filteredDataFourth = testDates.get(unParse(d3.time.month.offset(dates[0], 2)).slice(0, 7)).values;\n            filteredData = _.unionBy(filteredDataFirst, filteredDataNext, filteredDataThird, filteredDataFourth, 'key');\n          } else {\n            filteredData = filteredDataFirst;\n          }\n\n          d3.selectAll(\"#glow\").remove();\n          path = path.data(filteredData, function (d) {\n            return d.key;\n          });\n          lines = lines.data(dates, function (d) {\n            return d;\n          });\n          face = face.data(filteredData, function (d) {\n            return d.key;\n          });\n          path.enter().append(\"path\").attr(\"class\", \"line\").attr(\"d\", function (d) {\n            return line(d.values); //return lineFunction(d.values);\n\n            return line(getPathWeeks(d));\n          }).attr(\"transform\", \"translate(\" + x(dates[dates.length - 1]) + \")\").style(\"stroke\", function (d) {\n            var data = d;\n            return pathStroke(data);\n          }) // .style(\"display\",function(d){\n          // \treturn faceDisplay(d)\n          // })\n          .style(\"opacity\", function (d) {\n            return pathOpacity(d);\n          });\n          lines.enter().append(\"div\").attr(\"class\", \"date-line\").style(\"top\", function (d) {\n            return x(d) + \"px\";\n          }).style(\"display\", function (d) {\n            var date = +unParse(d).replace(\"-\", \"\").replace(\"-\", \"\");\n\n            if (weeksForDateLines.indexOf(date) > -1) {\n              return \"block\";\n            }\n\n            ;\n            return null;\n          }).append(\"p\").html(function (d) {\n            return niceParseThree(d);\n          });\n          face.enter().append(\"div\").attr(\"class\", \"face tk-futura-pt\") // .style(\"display\",function(d){\n          // \treturn faceDisplay(d)\n          // })\n          .style(\"background-image\", function (d) {\n            if (changedYear == \"scroll\") {\n              return null;\n            }\n\n            if (d[\"track_info\"][\"artist_url\"] == \"NULL\") {\n              return null;\n            }\n\n            if (d[\"track_info\"][\"artist_url\"] == \"manual\") {\n              var hostUrl = document.location.origin;\n              var pathUrl = document.location.pathname.replace(\"index.html\", \"\");\n              var idSong = nestedDatesTwo[unParse(d3.time.day.offset(dates[dates.length - 1], 7))][\"track\"];\n              nextSong = hostUrl + pathUrl + \"url/\" + idSong + \".m4a\";\n              return \"url(\" + nextSong + \")\";\n            }\n\n            return \"url(https://i.scdn.co/image/\" + d[\"track_info\"][\"artist_url\"] + \")\";\n          }).style(\"top\", function (d) {\n            return faceTop(d);\n          }).style(\"left\", function (d) {\n            var data = d;\n            return faceLeft(data);\n          }).append(\"p\").append(\"span\").text(function (d) {\n            var title = d.track_info.title;\n\n            if (title.length > 20) {\n              return title.slice(0, 17) + \"...\";\n            }\n\n            return title;\n          });\n          path.exit().remove();\n          face.exit().remove();\n          lines.exit().remove();\n        }\n\n        var currentDate = unParse(dates[0]);\n        var dateAhead = unParse(d3.time.day.offset(dates[0], 7));\n        var twoDatesAhead = unParse(d3.time.day.offset(dates[0], 14));\n        var opacityScale = d3.scale.linear().domain([5, 3, 1]).range([.01, .25, 1]);\n        var timelineScale = d3.scale.linear().domain([0, 354]).range([23, 375]);\n\n        function topArtist(d) {\n          return nestedDatesTwo[currentDate].title + \"â€”\" + nestedDatesTwo[currentDate].artist;\n        }\n\n        function faceBackground(d) {\n          var rank = d.nestedDateArray[dateAhead];\n\n          if (rank == 1) {\n            return colorTwo;\n          } else {\n            if (currentDate in d.nestedDateArray) {\n              var rank = d.nestedDateArray[currentDate];\n              return d3.interpolate(\"#fff\", \"#000\")(opacityScale(rank));\n            } else {\n              return d3.interpolate(\"#fff\", \"#000\")(opacityScale(.01));\n            }\n          }\n        }\n\n        ;\n        svg = d3.select(\".chart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\").attr(\"class\", \"lines-container\"); // var colorScheme = d3.schemeYlGnBu[5];\n        //colorScheme = d3.schemeGnBu[5];\n\n        var colorScheme = [\"#49217a\", \"#852c82\", \"#b52f59\", \"#f5af71\", \"#fcfbbc\"].reverse(); //colorScheme = [\"yellow\",\"orange\",\"red\",\"green\",\"steelblue\"]//.reverse()\n\n        svg.append(\"linearGradient\").attr(\"id\", \"temperature-gradient\").attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", y(5)).attr(\"y1\", 0).attr(\"x2\", y(1)).attr(\"y2\", 0).selectAll(\"stop\").data(colorScheme.reverse().map(function (d, i) {\n          return {\n            offset: i * 25 + \"%\",\n            color: d\n          };\n        }) // \t[\n        //   {offset: \"0%\", color: \"steelblue\"},\n        // \t{offset: \"20%\", color: \"green\"},\n        // \t{offset: \"40%\", color: \"yellow\"},\n        //   {offset: \"60%\", color: \"orange\"},\n        //   {offset: \"100%\", color: \"#FF2F28\"}\n        // ]\n        ).enter().append(\"stop\").attr(\"offset\", function (d) {\n          return d.offset;\n        }).attr(\"stop-color\", function (d) {\n          return d.color;\n        });\n        svg.append(\"defs\").html('<filter id=\"outline\"> <feMorphology in=\"SourceAlpha\" result=\"DILATED\" operator=\"dilate\" radius=\"3\"></feMorphology> <feFlood flood-color=\"#111\" flood-opacity=\"1\" result=\"PINK\"></feFlood> <feComposite in=\"PINK\" in2=\"DILATED\" operator=\"in\" result=\"OUTLINE\"></feComposite> <feMerge> <feMergeNode in=\"OUTLINE\"></feMergeNode> <feMergeNode in=\"SourceGraphic\"></feMergeNode> </feMerge> </filter>');\n        svg.append(\"defs\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\").attr(\"x\", 0).attr(\"y\", -500).attr(\"width\", width).attr(\"height\", function (d) {\n          if (viewportWidth < 326) {\n            return 500 + height - faceSize * .9;\n          }\n\n          if (viewportWidth < 376) {\n            return 500 + height - faceSize * .8;\n          }\n\n          if (viewportWidth < 411) {\n            return 500 + height - faceSize * .75;\n          }\n\n          if (viewportWidth < 421) {\n            return 500 + height - faceSize * .7;\n          }\n\n          return 500 + height - faceSize * .6;\n        });\n        svg.append(\"defs\").append(\"clipPath\").attr(\"id\", \"xaxisclip\").append(\"rect\").attr(\"width\", width + 20).attr(\"height\", height + margin.bottom * 2 + margin.top);\n        svg.append(\"defs\").append(\"filter\").attr(\"id\", 'blurred') //.attr({\"width\":\"200%\", \"height\":\"200%\"})\n        .append(\"feGaussianBlur\").attr(\"stdDeviation\", 8);\n        svg.append(\"defs\").append(\"filter\").attr(\"id\", 'blurredTwo') //.attr({\"width\":\"200%\", \"height\":\"200%\"})\n        .append(\"feGaussianBlur\").attr(\"stdDeviation\", 2); // build paths\n\n        var pathSvg = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"clip-path\", \"url(#clip)\").attr(\"class\", \"path-container\");\n\n        function getPathWeeks(d) {\n          var weeks = d.values.map(function (d) {\n            return d;\n          });\n          var weekArray = [];\n          var startOfWeek = d.values[0];\n          var end = d3.time.day.offset(startOfWeek.chart_date, 3);\n          var range = d3.time.day.range(startOfWeek.chart_date, end);\n\n          for (var item in range) {\n            weeks.push({\n              rank: startOfWeek.rank,\n              chart_date: range[item]\n            });\n          }\n\n          var endOfWeek = d.values[d.values.length - 1];\n          var endTwo = d3.time.day.offset(endOfWeek.chart_date, 3);\n          var rangeTwo = d3.time.day.range(endOfWeek.chart_date, endTwo);\n\n          for (var item in rangeTwo) {\n            weeks.push({\n              rank: endOfWeek.rank,\n              chart_date: rangeTwo[item]\n            });\n          }\n\n          weeks = weeks.sort(function (a, b) {\n            return a.chart_date - b.chart_date;\n          });\n          return weeks;\n        }\n\n        var lineFunction = d3.svg.line().interpolate(function (points) {\n          for (var point in points) {\n            points[point] = project(matrix, points[point]);\n          }\n\n          return points.join(\"L\");\n        }).x(function (d, i) {\n          return y(+d.rank);\n        }).y(function (d, i) {\n          return x(d.chart_date); //this x is now translating between 0 and height with date on y-axis\n        });\n        var path = pathSvg.selectAll('path').data(filteredData, function (d) {\n          return d.key;\n        }).enter().append(\"path\").attr(\"class\", \"line\").attr(\"d\", function (d) {\n          return line(d.values); //return lineFunction(d.values);\n\n          return line(getPathWeeks(d));\n        }).style(\"stroke\", function (d) {\n          //var data = d;\n          //return \"red\"\n          return pathStroke(d);\n        }).style(\"opacity\", function (d) {\n          var data = d;\n          return pathOpacity(data);\n        });\n\n        function clone(selector) {\n          var node = selector.node();\n          return d3.select(node.parentNode.insertBefore(node.cloneNode(true), node));\n        }\n\n        path.each(function (d, i) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n\n            if (rank == 1) {\n              clone(d3.select(this)).attr('filter', 'url(#blurred)').style(\"stroke-width\", '9px').style(\"stroke\", colorScheme[0]).style(\"opacity\", .8).attr(\"id\", \"glow\");\n            }\n          }\n        });\n        var bottomFrame = d3.select(\".bottom-frame\").style(\"width\", width + \"px\") //.style(\"width\",(620)+\"px\")\n        .style(\"height\", height + \"px\");\n        bottomFrame.select(\".ranking\").selectAll(\".rank-num\").style(\"color\", function (d, i) {\n          if (i == 4) {\n            return \"#71598e\";\n          }\n\n          return colorScheme[colorScheme.length - i - 1];\n        }); //guitar hero outline\n\n        var guitarHeroOutline = d3.select(\".guitar-frame\").style(\"width\", width + \"px\") //.style(\"width\",(620)+\"px\")\n        .style(\"height\", height + \"px\").append(\"svg\"); // guitarHeroOutline.append(\"rect\")\n        // \t.attr(\"x\",\"0\")\n        // \t.attr(\"y\",height-30-1)\n        // \t.attr(\"height\",30)\n        // \t.attr(\"width\",\"100%\")\n        // \t;\n\n        svg.append(\"linearGradient\").attr(\"id\", \"white-fade\").attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", 0).attr(\"y1\", -400).attr(\"x2\", \"20%\").attr(\"y2\", height - 30).selectAll(\"stop\").data([{\n          offset: 0 + \"%\",\n          color: \"rgba(255,255,255,0.0)\"\n        }, {\n          offset: 100 + \"%\",\n          color: \"rgba(255,255,255,1)\"\n        }]).enter().append(\"stop\").attr(\"offset\", function (d) {\n          return d.offset;\n        }).attr(\"stop-color\", function (d) {\n          return d.color;\n        });\n        svg.append(\"linearGradient\").attr(\"id\", \"yellow-fade\").attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", 0).attr(\"y1\", -400).attr(\"x2\", \"20%\").attr(\"y2\", height - 30).selectAll(\"stop\").data([{\n          offset: 0 + \"%\",\n          color: \"rgb(255,193,7)\",\n          opacity: 0\n        }, {\n          offset: 100 + \"%\",\n          color: \"rgb(255,193,7)\",\n          opacity: .2\n        }]).enter().append(\"stop\").attr(\"offset\", function (d) {\n          return d.offset;\n        }).attr(\"stop-color\", function (d) {\n          return d.color;\n        }).attr(\"stop-opacity\", function (d) {\n          return d.opacity;\n        });\n        guitarHeroOutline.append(\"rect\").attr(\"x\", 0).attr(\"width\", \"20%\").attr(\"y\", -400).attr(\"height\", function (d) {\n          return 400 + height - 30;\n        }).style(\"fill\", \"url(#yellow-fade)\");\n        guitarHeroOutline.selectAll(\"line\").data(d3.range(6)).enter().append(\"line\").attr(\"x1\", function (d, i) {\n          if (i == 0) {\n            return 1;\n          }\n\n          if (i == 5) {\n            return \"100%\";\n          }\n\n          return i * 20 + \"%\";\n        }).attr(\"x2\", function (d, i) {\n          if (i == 0) {\n            return 1;\n          }\n\n          if (i == 5) {\n            return \"100%\";\n          }\n\n          return i * 20 + \"%\";\n        }).attr(\"y1\", function (d) {\n          return -400;\n        }).attr(\"y2\", function (d) {\n          return height - 30 - 1;\n        }).style(\"stroke\", \"url(#white-fade)\");\n        ; // build faces\n\n        faces = d3.select(\".chart\").append(\"div\").attr(\"id\", \"faces\");\n        face = faces.append(\"div\").attr(\"class\", \"face-container\").selectAll(\".face\").data(filteredData, function (d) {\n          return d.key;\n        }).enter().append(\"div\").attr(\"class\", \"face tk-futura-pt\").style(\"background-image\", function (d) {\n          var data = d;\n          return faceBackgroundImage(data);\n        }).style(\"border-color\", function (d) {\n          return faceBorder(d);\n        }).style(\"opacity\", function (d) {\n          var data = d;\n          return faceOpacity(data);\n        }).style(\"top\", function (d) {\n          return faceTop(d);\n        }).style(\"left\", function (d) {\n          var data = d;\n          return faceLeft(data);\n        }).style(\"width\", faceSize + \"px\").style(\"height\", faceSize + \"px\").on(\"mouseover\", function (d) {\n          var data = d;\n          var element = d3.select(this);\n          faceMouseOver(data, element);\n        });\n        face.append(\"p\").append(\"span\").text(function (d) {\n          var title = d.track_info.title;\n\n          if (title.length > 20) {\n            return title.slice(0, 17) + \"...\";\n          }\n\n          return title;\n        });\n        lines = faces.append(\"div\").attr(\"class\", \"date-lines-container\").selectAll(\"div\").data(dates).enter().append(\"div\").attr(\"class\", \"date-line\").style(\"top\", function (d) {\n          return x(d) + \"px\";\n        }).style(\"display\", function (d) {\n          var date = +unParse(d).replace(\"-\", \"\").replace(\"-\", \"\");\n\n          if (weeksForDateLines.indexOf(date) > -1) {\n            return \"block\";\n          }\n\n          ;\n          return null;\n        });\n        lines.append(\"p\").html(function (d) {\n          return niceParseThree(d);\n        }); // var chartContainer = d3.select(\".chart\")\n        //   .on(\"mouseover\", function(){\n        // \t\tconsole.log('mouseover')\n        //     if(!playing){\n        //       pausePlay.style(\"opacity\",1);\n        //     }\n        //   })\n        //   .on(\"mouseout\",function(){\n        //     if(!playing){\n        //       pausePlay.style(\"opacity\",0);\n        //     }\n        //   })\n        //   ;\n\n        var textLeftOffset = 240;\n        var svgTwo = d3.select(\".chart\").append(\"svg\").attr(\"class\", \"text-container\").append(\"g\").attr(\"clip-path\", \"url(#clip)\").attr(\"transform\", function () {\n          var marginTop = margin.top;\n          return \"translate(\" + textLeftOffset + \",\" + marginTop + \")\";\n        });\n        var clickPlayTip = d3.select(\".click-to-play\");\n        var trackLegend = d3.select(\".track-legend\").selectAll(\"div\");\n        var interpolateOne = d3.interpolate(\"#0C0C0C\", \"#FFFFFF\");\n\n        function faceTop(d) {\n          if (dateAhead in d.nestedDateArray) {\n            return x(dates[1]) + \"px\";\n          } else {\n            if (currentDate in d.nestedDateArray || unParse(d3.time.day.offset(dates[0], -7)) in d.nestedDateArray || unParse(d3.time.day.offset(dates[0], -14)) in d.nestedDateArray) {\n              return x(dates[0]) + \"px\";\n            }\n\n            var chart_date = d.values[d.values.length - 1].chart_date;\n            return x(chart_date) + \"px\"; //this x is now translating between 0 and height with date on y-axis\n          }\n        }\n\n        function faceLeft(d) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n            return y(rank) + faceAdjust + margin.top + \"px\";\n          } else {\n            if (unParse(d3.time.day.offset(dates[0], -7)) in d.nestedDateArray) {\n              var rank = d.nestedDateArray[currentDate];\n              return y(rank) + faceAdjust + margin.top + \"px\";\n            }\n\n            var rank = d.values[d.values.length - 1].rank;\n            return y(rank) + faceAdjust + margin.top + \"px\";\n          }\n        }\n\n        function faceTopPosition(d) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n            return y(rank) + faceAdjust + margin.top + \"px\";\n          } else {\n            return width + 100 + \"px\";\n          }\n        }\n\n        ;\n\n        function faceBackgroundImage(d) {\n          if (d[\"track_info\"][\"artist_url\"] == \"NULL\") {\n            return null;\n          }\n\n          return \"url(https://i.scdn.co/image/\" + d[\"track_info\"][\"artist_url\"] + \")\";\n        }\n\n        function faceOpacity(d) {\n          if (dateAhead in d.nestedDateArray) {\n            return null;\n          } else {\n            if (unParse(d3.time.day.offset(dates[0], -7)) in d.nestedDateArray || unParse(d3.time.day.offset(dates[0], -14)) in d.nestedDateArray) {\n              return 0;\n            }\n\n            if (unParse(dates[2]) in d.nestedDateArray || unParse(dates[3]) in d.nestedDateArray || unParse(dates[4]) in d.nestedDateArray) {\n              return .8;\n            }\n\n            if (dates[0] > d3.max(d.values, function (d) {\n              return d.chart_date;\n            })) {\n              return 0;\n            } else {\n              return .1;\n            }\n          }\n        }\n\n        function faceDisplay(d) {\n          if (dateAhead in d.nestedDateArray) {\n            return null;\n          } else {\n            if (unParse(d3.time.day.offset(dates[0], -7)) in d.nestedDateArray || unParse(d3.time.day.offset(dates[0], -14)) in d.nestedDateArray) {\n              return null;\n            }\n\n            if (unParse(dates[2]) in d.nestedDateArray || unParse(dates[3]) in d.nestedDateArray || unParse(dates[4]) in d.nestedDateArray) {\n              return null;\n            }\n\n            if (dates[0] > d3.max(d.values, function (d) {\n              return d.chart_date;\n            })) {\n              return \"none\";\n            } else {\n              return \"none\";\n            }\n          }\n        }\n\n        var bioName = d3.select(\".bio-name\");\n        var bioText = d3.select(\".bio-info\");\n        var pausePlay = d3.selectAll(\".paused-play-button\").on(\"click\", function () {\n          d3.select(this).style(\"pointer-events\", \"none\");\n          d3.select(\".pause-section\").style(\"display\", \"initial\");\n          returnPath();\n        });\n        var searchArray = [];\n        var searchResults = d3.select(\".search-results-new\");\n        var searchResultMouseOver = false;\n\n        function artistClean(artist) {\n          return artist.split(\" Featuring\")[0];\n        }\n\n        var sampleRotate; // window.addEventListener(\"wheel\", event => {\n        //   const delta = Math.sign(event.deltaY);\n        // \tif(Math.round(event.timeStamp) % 2 == 0){\n        // \t\ttestScroll(delta);\n        // \t}\n        // });\n\n        var timeoutScroll = null;\n\n        function testScroll(direction) {\n          if (playing) {\n            moveChart(\"stop\");\n          }\n\n          window.clearTimeout(timeoutScroll);\n          timeoutScroll = window.setTimeout(function (d) {\n            face.style(\"background-image\", function (d) {\n              if (d[\"track_info\"][\"artist_url\"] == \"NULL\") {\n                return null;\n              }\n\n              if (d[\"track_info\"][\"artist_url\"] == \"manual\") {\n                var hostUrl = document.location.origin;\n                var pathUrl = document.location.pathname.replace(\"index.html\", \"\");\n                var idSong = nestedDatesTwo[unParse(d3.time.day.offset(dates[dates.length - 1], 7))][\"track\"];\n                nextSong = hostUrl + pathUrl + \"url/\" + idSong + \".m4a\";\n                return \"url(\" + nextSong + \")\";\n              }\n\n              return \"url(https://i.scdn.co/image/\" + d[\"track_info\"][\"artist_url\"] + \")\";\n            });\n            moveChart(dates[0].getTime());\n          }, 1000);\n\n          for (var i in dates) {\n            dates[i] = d3.time.day.offset(dates[i], 7 * direction);\n          }\n\n          ;\n          currentDate = unParse(dates[0]);\n          dateAhead = unParse(d3.time.day.offset(dates[0], 7));\n          twoDatesAhead = unParse(d3.time.day.offset(dates[0], 14));\n          changeYear(\"scroll\");\n          x.domain([dates[0], dates[dates.length - 1]]);\n          face.style(\"opacity\", function (d) {\n            return faceOpacity(d);\n          }).style(\"width\", faceSize + \"px\").style(\"height\", faceSize + \"px\").style(\"border-color\", function (d) {\n            return faceBorder(d);\n          }).style(\"top\", function (d) {\n            return faceTop(d);\n          }).style(\"left\", function (d) {\n            var data = d;\n            return faceLeft(data);\n          });\n          lines.style(\"top\", function (d) {\n            return x(d) + \"px\";\n          }).style(\"opacity\", function (d, i) {\n            if (i == 0) {\n              return 0;\n            }\n          });\n          d3.select(\".date-lines-container\").style(\"transform\", \"translate(0px,\" + x(d3.time.day.offset(dates[dates.length - 1], 7)) + \"px)\");\n          path.attr(\"d\", function (d) {\n            //return lineFunction(d.values);\n            return line(d.values);\n            return line(getPathWeeks(d));\n          }).style(\"stroke\", function (d) {\n            var data = d;\n            return pathStroke(data);\n          }).style(\"opacity\", function (d) {\n            var data = d;\n            return pathOpacity(data);\n          }).style(\"stroke-width\", function (d) {\n            var data = d;\n            return pathStrokeWidth(data);\n          }).each(function (d, i) {\n            if (dateAhead in d.nestedDateArray) {\n              var rank = d.nestedDateArray[dateAhead];\n\n              if (rank == 1) {\n                clone(d3.select(this)).attr('filter', 'url(#blurred)').style(\"stroke\", colorScheme[0]).attr(\"id\", \"glow\").style(\"stroke-width\", '10px').style(\"opacity\", 1);\n              } else {\n                clone(d3.select(this)) //.attr('filter', 'url(#blurredTwo)')\n                .style(\"stroke\", \"#2a292f\").attr(\"id\", \"glow\").style(\"stroke-width\", '6px');\n              }\n            }\n          });\n          d3.select(\".path-container\").selectAll(\"path\").attr(\"transform\", \"translate(0,0)\"); //.attr(\"transform\", \"translate(0,\"+ x(d3.time.day.offset(dates[dates.length-1], 7)) + \")\")\n          // d3.select(\".path-container\").selectAll(\"path\")\n          // \t.transition()\n          // \t.attr(\"transform\", \"translate(0,0)\")\n          // \t;\n        }\n\n        ; // d3.select(\"body\").on(\"click\",function(d){\n        // \tconsole.log(\"here\");\n        // \ttestScroll(\"hi\");\n        // })\n\n        function moveChart(d) {\n          if (playing == true) {\n            transition = transition.transition(0).duration(0);\n            globalGain.gain.cancelScheduledValues(context.currentTime);\n            globalGain.gain.setValueAtTime(0, context.currentTime); // if ( source ) {\n            // \tif(!source.stop){\n            // \t\tsource.stop = source.noteOff;\n            // \t}\n            // }\n            //\n            // if ( lastSource ) {\n            // \tif(!lastSource.stop){\n            // \t\tlastSource.stop = lastSource.noteOff;\n            // \t}\n            // \tlastSource.stop(0);\n            // }\n          }\n\n          if (d == \"stop\") {\n            playing = false;\n            d3.select(\".play-button\").style(\"display\", \"block\");\n            d3.select(\".pause-button\").style(\"display\", \"none\"); // lines.transition().duration(0);\n            // face.transition().duration(0);\n            // path.transition().duration(0);\n          }\n\n          if (d != \"stop\") {\n            playing = true;\n            d3.select(\".play-button\").style(\"display\", null);\n            d3.select(\".pause-button\").style(\"display\", null);\n            var dateSelected = new Date(+d);\n            var goal = numParse(dateSelected);\n            var closest = weeksForDateLines.reduce(function (prev, curr) {\n              return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev;\n            }); //interate through 17 weeks by adding 7 to the start day\n\n            dates = [numParseDate(JSON.stringify(closest))];\n            var i;\n\n            for (i = 0; i < n; i++) {\n              var length = dates.length;\n              var date = d3.time.day.offset(dates[length - 1], 7);\n              dates.push(date);\n            }\n\n            var dateAhead = unParse(d3.time.day.offset(dates[0], 7));\n\n            var _twoDatesAhead = unParse(d3.time.day.offset(dates[0], 14));\n\n            var currentDate = unParse(dates[0]);\n            x.domain([dates[0], dates[dates.length - 1]]);\n            window.clearTimeout(tickDelay);\n            tickDelay = setTimeout(function () {\n              if (1 < 2) {\n                for (i = 1; i < 20; i++) {\n                  var timeOne = dates[1];\n                  var timeTwo = d3.time.day.offset(dates[1], 7 * i);\n\n                  if (nestedDatesTwo[unParse(timeOne)][\"track\"] != nestedDatesTwo[unParse(timeTwo)][\"track\"]) {\n                    playLength = Math.max((i - 1) * shiftDuration, shiftDuration);\n                    break;\n                  }\n                }\n\n                var currTime = context.currentTime;\n                var currSong;\n                var previewItemId = nestedDatesTwo[unParse(d3.time.day.offset(dates[1], 0))][\"preview\"];\n                console.log(previewItemId);\n                currSong = \"https://p.scdn.co/mp3-preview/\" + previewItemId;\n                startTime = currTime + 1;\n                loadSounds(currSong, playLength, startTime, \"now\");\n              }\n\n              transition = d3.select({}).transition().duration(shiftDuration).ease(\"linear\");\n              tick();\n            }, 100);\n          }\n        }\n\n        ;\n\n        function textFill(d) {\n          var rank = d.nestedDateArray[currentDate];\n\n          if (rank == 1) {\n            return colorTwo;\n          } else {\n            return textColor;\n          }\n        }\n\n        function pathStroke(d) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n            return \"url(#temperature-gradient)\";\n\n            if (rank == 1) {\n              return \"red\";\n            } else {\n              return \"url(#temperature-gradient)\";\n            } // if(rank==2){\n            // \treturn \"blue\";\n            // }\n            // if(rank==3){\n            // \treturn \"green\";\n            // }\n            // if(rank==4){\n            // \treturn \"purple\";\n            // }\n            // return \"yellow\";\n\n          }\n\n          return \"none\"; // var rank = d.nestedDateArray[currentDate];\n          // if (rank == 1){\n          //   return \"url(#temperature-gradient)\";\n          //   // return colorTwo;\n          // }\n          // else{\n          //   return \"url(#temperature-gradient)\";\n          // }\n        }\n\n        function faceBorder(d) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n            return colorScheme[5 - rank];\n          }\n\n          return null;\n        }\n\n        function faceShadow(d) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n\n            if (rank == 1) {\n              return \"1px 3px 6px #800080, 1px 3px 9px #800080\";\n            }\n          }\n\n          return null;\n        }\n\n        function pathOpacity(d) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n\n            if (rank == 1) {\n              return 1;\n            }\n\n            if (rank == 2) {\n              return .8;\n            }\n\n            return .6;\n          }\n\n          return 0;\n        }\n\n        function pathStrokeWidth(d) {\n          if (dateAhead in d.nestedDateArray) {\n            var rank = d.nestedDateArray[dateAhead];\n\n            if (rank == 1) {\n              return \"4px\";\n            }\n\n            return \"4px\";\n          }\n\n          return \"1px\";\n        }\n\n        var transition = d3.select({}).transition().duration(shiftDuration).ease(\"linear\");\n        var tickCount = 0;\n        var extentDates = d3.extent(nestedDates, function (d) {\n          return parseDate(d.key);\n        });\n        extentDates[0] = parseDate(\"2019-01-01\");\n        var yearArray = [];\n        var yearsForPips = [\"2019-01\", \"2019-03\", \"2019-06\", \"2019-09\", \"2019-12\"];\n\n        for (var date in yearsForPips) {\n          var items = testDates.get(yearsForPips[date]);\n          var last = items.values[items.values.length - 1].chart_date.getTime();\n          yearArray.push(last);\n        }\n\n        console.log('yearArray', yearArray);\n\n        function toFormatYear(v) {\n          return sideBarParse(new Date(+v));\n        }\n\n        function toFormat(v) {\n          return niceParse(new Date(+v));\n        } // Add a formatter to the slider\n\n\n        var orientation = \"vertical\";\n\n        if (viewportWidth < 700) {\n          orientation = \"horizontal\";\n        }\n\n        console.log(extentDates);\n        var sliderDates = nouislider__WEBPACK_IMPORTED_MODULE_0___default.a.create(d3.select(\"#slider\").node(), {\n          start: [start.getTime()],\n          step: 7 * 24 * 60 * 60 * 1000,\n          range: {\n            'min': extentDates[0].getTime(),\n            'max': extentDates[1].getTime()\n          },\n          format: {\n            to: toFormat,\n            from: Number\n          },\n          connect: [true, false],\n          tooltips: [true],\n          orientation: orientation,\n          pips: {\n            mode: 'values',\n            values: yearArray,\n            density: 4,\n            stepped: true,\n            format: {\n              to: toFormatYear,\n              from: Number\n            }\n          }\n        });\n        sliderDates.on('start', function (values, handle) {\n          dragging = true;\n        });\n        sliderDates.on('change', function (values, handle, unencoded, tap, positions) {\n          console.log(\"changing\");\n          moveChart(unencoded);\n        });\n        sliderDates.on('end', function (values, handle, unencoded, tap, positions) {\n          dragging = false;\n          moveChart(unencoded);\n        });\n        var playVisible = true;\n        d3.select(\".start-button\").on(\"click\", function () {\n          d3.select(\".loading-screen\").style(\"opacity\", 0).style(\"pointer-events\", \"none\").transition().duration(0).delay(2000).remove();\n          d3.select(\"#content\").classed(\"not-loaded\", false);\n          moveChart(dates[0].getTime());\n          var playNow2 = createSource(scratch);\n          source2 = playNow2.source;\n\n          if (!source2.start) {\n            source2.start = source.noteOn;\n          }\n\n          source2.start(0);\n        });\n        d3.select(\".start-button-muted\").on(\"click\", function () {\n          d3.select(\".loading-screen\").style(\"opacity\", 0).style(\"pointer-events\", \"none\").transition().duration(0).delay(2000).remove();\n          d3.select(\"#content\").classed(\"not-loaded\", false);\n          d3.select(\".vol\").select(\".mute-icon\").style(\"display\", \"none\");\n          d3.select(\".vol\").select(\".vol-icon\").style(\"display\", \"block\");\n          var playNow2 = createSource(scratch);\n          source2 = playNow2.source;\n\n          if (!source2.start) {\n            source2.start = source.noteOn;\n          }\n\n          var gainNode = playNow2.gainNode;\n          gainNode.gain.value = 0;\n          source2.start(0); // var playNow = createSource(bufferNow);\n          // source = playNow.source;\n          // source.loop = true;\n          // var gainNode = playNow.gainNode;\n          // var duration = playingLength/1000 + 2;\n          //\n          //\n          // if(!muted){\n          // \tgainNode.gain.linearRampToValueAtTime(0, startingTime);\n          // \tgainNode.gain.linearRampToValueAtTime(1, startingTime + 1);\n          // }\n          // else {\n          // \tgainNode.gain.value = 0;\n          // }\n          //\n          // if (!source.start){\n          // \tsource.start = source.noteOn;\n          // }\n          //\n          // source.start(context.currentTime + (startingTime - context.currentTime));\n          //\n          // if(!muted){\n          // \tgainNode.gain.linearRampToValueAtTime(1, startingTime + duration-1);\n          // \tgainNode.gain.linearRampToValueAtTime(0, startingTime + duration);\n          // }\n          //\n          // source.stop(context.currentTime + (startingTime - context.currentTime) + duration + .1)\n          //\n          // globalGain = gainNode;\n\n          muted = true;\n          moveChart(dates[0].getTime());\n        });\n        d3.select(\".play-pause\").on(\"click\", function () {\n          if (playing) {\n            moveChart(\"stop\");\n          } else {\n            moveChart(dates[0].getTime());\n          }\n        });\n        d3.select(\".vol\").on(\"click\", function () {\n          if (muted) {\n            muted = false;\n            globalGain.gain.cancelScheduledValues(context.currentTime);\n            globalGain.gain.setValueAtTime(1, context.currentTime);\n            d3.select(\".vol\").select(\".mute-icon\").style(\"display\", null);\n            d3.select(\".vol\").select(\".vol-icon\").style(\"display\", null);\n          } else {\n            muted = true; //globalGain.gain.value = 0;\n\n            globalGain.gain.cancelScheduledValues(context.currentTime);\n            globalGain.gain.setValueAtTime(0, context.currentTime);\n            d3.select(\".vol\").select(\".mute-icon\").style(\"display\", \"none\");\n            d3.select(\".vol\").select(\".vol-icon\").style(\"display\", \"block\");\n          }\n        });\n        d3.selectAll(\".noUi-value\").text(function (d) {\n          return yearParse(new Date(+d3.select(this).text()));\n        });\n\n        function clickOnPip() {\n          var value = this.getAttribute('data-value');\n          sliderDates.set(Number(value));\n          moveChart(Number(value));\n        }\n\n        var pips = d3.select(\"#slider\").selectAll('.noUi-value').each(function (d) {\n          d3.select(this).node().addEventListener('click', clickOnPip);\n        });\n\n        function tick() {\n          if (unParse(dates[0]) == \"2019-03-30\") {\n            moveChart(\"stop\");\n            return null;\n          }\n\n          var currTime = context.currentTime;\n\n          for (var i in dates) {\n            dates[i] = d3.time.day.offset(dates[i], 7);\n          }\n\n          ;\n          var nextSong;\n\n          if (nestedDatesTwo[unParse(dates[0])][\"track\"] != nestedDatesTwo[unParse(d3.time.day.offset(dates[0], 7))][\"track\"] && 1 < 2) {\n            for (i = 2; i < 20; i++) {\n              var timeOne = d3.time.day.offset(dates[0], 7);\n              var timeTwo = d3.time.day.offset(dates[0], 7 * i);\n\n              if (nestedDatesTwo[unParse(timeOne)][\"track\"] != nestedDatesTwo[unParse(timeTwo)][\"track\"]) {\n                playLength = (i - 1) * shiftDuration;\n                break;\n              }\n            }\n\n            var previewItemId = nestedDatesTwo[unParse(d3.time.day.offset(dates[0], 7))][\"preview\"];\n            nextSong = \"https://p.scdn.co/mp3-preview/\" + previewItemId;\n\n            if (previewItemId === '') {\n              nextSong = \"https://p.scdn.co/mp3-preview/\" + \"NULL\";\n            }\n\n            if (previewItemId == \"manual\") {\n              var hostUrl = document.location.origin;\n              var pathUrl = document.location.pathname.replace(\"index.html\", \"\");\n              var idSong = nestedDatesTwo[unParse(d3.time.day.offset(dates[0], 7))][\"track\"];\n              nextSong = hostUrl + pathUrl + \"url/\" + idSong + \".m4a\";\n            }\n\n            startTime = currTime + shiftDuration / 1000;\n            loadSounds(nextSong, playLength, startTime, \"scheduled\");\n          }\n\n          ;\n          currentDate = unParse(dates[0]);\n          dateAhead = unParse(d3.time.day.offset(dates[0], 7));\n          twoDatesAhead = unParse(d3.time.day.offset(dates[0], 14));\n          console.log(currentDate);\n          changeYear(currentYear);\n          var numberOneDates = [dates[0]];\n\n          for (i = 0; i < 8; i++) {\n            var length = numberOneDates.length;\n            var date = d3.time.day.offset(numberOneDates[length - 1], 1);\n            numberOneDates.push(date);\n          }\n\n          if (!dragging) {\n            sliderDates.set(Number(dates[0].getTime()));\n          }\n\n          transition = transition.each(function () {\n            // var numberShiftDuration = shiftDuration/7;\n            // d3.select(\".year-drop-down-text\").text(currentDate.slice(0,4));\n            // d3.select(\"#top-date-sub\")\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[0]);\n            //   })\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[1]);\n            //   })\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[2]);\n            //   })\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[3]);\n            //   })\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[4]);\n            //   })\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[5]);\n            //   })\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[6]);\n            //   })\n            //   .transition().duration(numberShiftDuration).text(function(d){\n            //     return niceParseTwo(numberOneDates[7]);\n            //   })\n            //   ;\n            d3.select(\"#top-title-sub\").text(function (d) {\n              var title = nestedDatesTwo[unParse(dates[0])].title;\n\n              if (title.length > 25 && mobile) {\n                return title.slice(0, 22) + \"...\";\n              }\n\n              return nestedDatesTwo[unParse(dates[0])].title;\n            });\n            d3.select(\"#top-artist-sub\").text(function () {\n              return artistClean(nestedDatesTwo[unParse(dates[0])].artist);\n            });\n\n            if (nestedDatesTwo[unParse(dates[0])][\"track\"] != nestedDatesTwo[unParse(dates[1])][\"track\"]) {\n              countStreak = 1; // d3.select(\"#top-title-sub\").text(nestedDatesTwo[unParse(dates[0])].title);\n              //var topArtistName = nestedDatesTwo[currentDate].artist.split(\" Feat\")[0];\n\n              d3.select(\".streak\").style(\"opacity\", 0); //d3.select(\".streak\").select(\".big\").text(countStreak)\n            } else {\n              countStreak = countStreak + 1;\n\n              if (countStreak > 2) {\n                d3.select(\".streak\").style(\"opacity\", 1);\n              }\n\n              d3.select(\".streak\").select(\".big\").text(countStreak); //.style(\"font-size\",\"70px\")\n              // window.setTimeout(function(){\n              // \td3.select(\".streak\").select(\".big\")\n              // \t\t.style(\"font-size\",null)\n              // },100)\n            }\n\n            x.domain([dates[0], dates[dates.length - 1]]);\n            face.style(\"opacity\", function (d) {\n              return faceOpacity(d);\n            }) // .style(\"display\",function(d){\n            // \treturn faceDisplay(d)\n            // })\n            .style(\"width\", faceSize + \"px\").style(\"height\", faceSize + \"px\").style(\"border-color\", function (d) {\n              return faceBorder(d);\n            }) // .style(\"box-shadow\",function(d){\n            // \treturn faceShadow(d);\n            // })\n            .transition().style(\"top\", function (d) {\n              return faceTop(d);\n            }).style(\"left\", function (d) {\n              var data = d;\n              return faceLeft(data);\n            });\n            lines.style(\"top\", function (d) {\n              return x(d) + \"px\";\n            }).transition().style(\"opacity\", function (d, i) {\n              if (i == 0) {\n                return 0;\n              }\n            });\n            d3.select(\".date-lines-container\").style(\"transform\", \"translate(0px,\" + x(d3.time.day.offset(dates[dates.length - 1], 7)) + \"px)\").transition().styleTween('transform', function (d) {\n              return d3.interpolateString(\"translate(0px,\" + x(d3.time.day.offset(dates[dates.length - 1], 7)) + \"px)\", \"translate(0px,0px)\");\n            });\n            path.attr(\"d\", function (d) {\n              //return lineFunction(d.values);\n              return line(d.values);\n              return line(getPathWeeks(d));\n            }).style(\"stroke\", function (d) {\n              var data = d;\n              return pathStroke(data);\n            }).style(\"opacity\", function (d) {\n              var data = d;\n              return pathOpacity(data);\n            }) // .style(\"display\",function(d){\n            // \treturn faceDisplay(d)\n            // })\n            .style(\"stroke-width\", function (d) {\n              var data = d;\n              return pathStrokeWidth(data);\n            }).each(function (d, i) {\n              if (dateAhead in d.nestedDateArray) {\n                var rank = d.nestedDateArray[dateAhead];\n\n                if (rank == 1) {\n                  clone(d3.select(this)).attr('filter', 'url(#blurred)').style(\"stroke\", colorScheme[0]).attr(\"id\", \"glow\").style(\"stroke-width\", '10px').style(\"opacity\", 1);\n                } else {\n                  clone(d3.select(this)) //.attr('filter', 'url(#blurredTwo)')\n                  .style(\"stroke\", \"#2a292f\").attr(\"id\", \"glow\").style(\"stroke-width\", '6px');\n                }\n              }\n            });\n            d3.select(\".path-container\").selectAll(\"path\").attr(\"transform\", \"translate(0,\" + x(d3.time.day.offset(dates[dates.length - 1], 7)) + \")\");\n            d3.select(\".path-container\").selectAll(\"path\").transition().attr(\"transform\", \"translate(0,0)\"); // }).transition().each(\"start\", tick);\n          }).transition().each(\"start\", function () {\n            if (this.__transition__.count < 2) tick(); //   //tick();\n          }); // });\n        }\n\n        ;\n\n        (function () {\n          hidden = \"hidden\"; // Standards:\n\n          if (hidden in document) document.addEventListener(\"visibilitychange\", onchange);else if ((hidden = \"mozHidden\") in document) document.addEventListener(\"mozvisibilitychange\", onchange);else if ((hidden = \"webkitHidden\") in document) document.addEventListener(\"webkitvisibilitychange\", onchange);else if ((hidden = \"msHidden\") in document) document.addEventListener(\"msvisibilitychange\", onchange); // IE 9 and lower:\n          else if (\"onfocusin\" in document) document.onfocusin = document.onfocusout = onchange; // All others:\n            else window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;\n\n          function onchange(evt) {\n            var v = \"visible\",\n                h = \"hidden\",\n                evtMap = {\n              focus: v,\n              focusin: v,\n              pageshow: v,\n              blur: h,\n              focusout: h,\n              pagehide: h\n            };\n            evt = evt || window.event;\n\n            if (evt.type in evtMap) {} else {\n              if (this[hidden] == true) {\n                if (playing) {\n                  console.log(\"stopped for hidden\");\n                  moveChart(\"stop\");\n                }\n              } else {\n                if (playing) {\n                  console.log(\"continuing\");\n                  moveChart(dates[0].getTime());\n                }\n              }\n            }\n          } // set the initial state (but only if browser supports the Page Visibility API)\n\n\n          if (document[hidden] !== undefined) onchange({\n            type: document[hidden] ? \"blur\" : \"focus\"\n          });\n        })();\n      });\n    });\n  });\n\n  function BufferLoader(context, urlList, callback, playingLength, startingTime, thing) {\n    this.context = context;\n    this.urlList = urlList;\n    this.onload = callback;\n    this.bufferList = new Array();\n    this.loadCount = 0;\n    this.startingTime = startingTime;\n    this.playingLength = playingLength;\n    this.thing = thing;\n  }\n\n  BufferLoader.prototype.loadBuffer = function (url, index) {\n    // Load buffer asynchronously\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    var loader = this;\n\n    request.onload = function () {\n      // Asynchronously decode the audio file data in request.response\n      loader.context.decodeAudioData(request.response, function (buffer) {\n        if (!buffer) {\n          alert('error decoding file data: ' + url);\n          return;\n        }\n\n        loader.bufferList[index] = buffer;\n        if (++loader.loadCount == loader.urlList.length) loader.onload(loader.bufferList, loader.playingLength, loader.startingTime, loader.thing);\n      }, function (error) {\n        console.error('decodeAudioData error', error);\n      });\n    };\n\n    request.onerror = function () {\n      alert('BufferLoader: XHR error');\n    };\n\n    request.send();\n  };\n\n  BufferLoader.prototype.load = function () {\n    for (var i = 0; i < this.urlList.length; ++i) {\n      this.loadBuffer(this.urlList[i], i);\n    }\n  };\n\n  function loadScratch(url) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", url, true);\n    req.responseType = \"arraybuffer\";\n\n    req.onload = function () {\n      //decode the loaded data\n      context.decodeAudioData(req.response, function (buffer) {\n        scratch = buffer;\n      });\n    };\n\n    req.send();\n  }\n\n  function loadHit(url) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", url, true);\n    req.responseType = \"arraybuffer\";\n\n    req.onload = function () {\n      //decode the loaded data\n      context.decodeAudioData(req.response, function (buffer) {\n        hit = buffer;\n      });\n    };\n\n    req.send();\n  }\n\n  function play() {\n    //create a source node from the buffer\n    var src = context.createBufferSource();\n    src.buffer = buf; //connect to the final output node (the speakers)\n\n    src.connect(context.destination); //play immediately\n\n    src.noteOn(0);\n  }\n\n  window.AudioContext = window.AudioContext || window.webkitAudioContext;\n  context = new AudioContext();\n  loadScratch(\"assets/i_wish.mp3\"); // loadHit(\"url/scratch.wav\");\n\n  function loadSounds(url, playingLength, startingTime, thing) {\n    if (url == \"https://p.scdn.co/mp3-preview/NULL\") {} else {\n      var bufferLoader = new BufferLoader(context, [url], finishedLoading, playingLength, startingTime, thing);\n      bufferLoader.load();\n    }\n  }\n\n  function finishedLoading(bufferList, playingLength, startingTime, thing) {\n    playHelper(bufferList[0], playingLength, startingTime, thing);\n  }\n\n  ;\n\n  function createSource(buffer) {\n    var source = context.createBufferSource();\n    var gainNode = context.createGain ? context.createGain() : context.createGainNode();\n    source.buffer = buffer; // Connect source to gain.\n\n    source.connect(gainNode); // Connect gain to destination.\n\n    gainNode.connect(context.destination);\n    return {\n      source: source,\n      gainNode: gainNode\n    };\n  }\n\n  function playHelper(bufferNow, playingLength, startingTime, thing) {\n    var currTime = context.currentTime;\n    lastSource = source;\n    var playNow = createSource(bufferNow);\n    source = playNow.source;\n    source.loop = true;\n    var gainNode = playNow.gainNode;\n    var duration = playingLength / 1000 + 2;\n\n    if (!muted) {\n      gainNode.gain.linearRampToValueAtTime(0, startingTime);\n      gainNode.gain.linearRampToValueAtTime(1, startingTime + 1);\n    } else {\n      gainNode.gain.value = 0;\n    }\n\n    if (!source.start) {\n      source.start = source.noteOn;\n    }\n\n    source.start(context.currentTime + (startingTime - context.currentTime));\n\n    if (!muted) {\n      gainNode.gain.linearRampToValueAtTime(1, startingTime + duration - 1);\n      gainNode.gain.linearRampToValueAtTime(0, startingTime + duration);\n    }\n\n    source.stop(context.currentTime + (startingTime - context.currentTime) + duration + .1);\n    globalGain = gainNode;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/graphic.js\n");

/***/ }),

/***/ "./src/js/utils/is-mobile.js":
/*!***********************************!*\
  !*** ./src/js/utils/is-mobile.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// device sniffing for mobile\nvar isMobile = {\n  android: function android() {\n    return navigator.userAgent.match(/Android/i);\n  },\n  blackberry: function blackberry() {\n    return navigator.userAgent.match(/BlackBerry/i);\n  },\n  ios: function ios() {\n    return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n  },\n  opera: function opera() {\n    return navigator.userAgent.match(/Opera Mini/i);\n  },\n  windows: function windows() {\n    return navigator.userAgent.match(/IEMobile/i);\n  },\n  any: function any() {\n    return isMobile.android() || isMobile.blackberry() || isMobile.ios() || isMobile.opera() || isMobile.windows();\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (isMobile);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvaXMtbW9iaWxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzL2lzLW1vYmlsZS5qcz9jMzcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGRldmljZSBzbmlmZmluZyBmb3IgbW9iaWxlXG5cbmNvbnN0IGlzTW9iaWxlID0ge1xuXHRhbmRyb2lkOiAoKSA9PiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkL2kpLFxuXG5cdGJsYWNrYmVycnk6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0JsYWNrQmVycnkvaSksXG5cblx0aW9zOiAoKSA9PiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmV8aVBhZHxpUG9kL2kpLFxuXG5cdG9wZXJhOiAoKSA9PiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9PcGVyYSBNaW5pL2kpLFxuXG5cdHdpbmRvd3M6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0lFTW9iaWxlL2kpLFxuXG5cdGFueTogKCkgPT4gKFxuXHRcdGlzTW9iaWxlLmFuZHJvaWQoKSB8fFxuXHRcdGlzTW9iaWxlLmJsYWNrYmVycnkoKSB8fFxuXHRcdGlzTW9iaWxlLmlvcygpIHx8XG5cdFx0aXNNb2JpbGUub3BlcmEoKSB8fFxuXHRcdGlzTW9iaWxlLndpbmRvd3MoKVxuXHQpLFxufVxuXG5leHBvcnQgZGVmYXVsdCBpc01vYmlsZVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFYQTtBQW9CQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/utils/is-mobile.js\n");

/***/ })

/******/ });